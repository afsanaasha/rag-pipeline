What Is Amazon SageMaker?
Amazon SageMaker is a fully managed machine learning service. With Amazon SageMaker, data
scientists and developers can quickly and easily build and train machine learning models, and then
directly deploy them into a production-ready hosted environment. It provides an integrated Jupyter
authoring notebook instance for easy access to your data sources for exploration and analysis, so you
don't have to manage servers. It also provides common machine learning algorithms that are optimized
to run efficiently against extremely large data in a distributed environment. With native support for
bring-your-own-algorithms and frameworks, Amazon SageMaker offers flexible distributed training
options that adjust to your specific workflows. Deploy a model into a secure and scalable environment by
launching it with a single click from the Amazon SageMaker console. Training and hosting are billed by
minutes of usage, with no minimum fees and no upfront commitments.
This is a HIPAA Eligible Service. For more information about AWS, U.S. Health Insurance Portability and
Accountability Act of 1996 (HIPAA), and using AWS services to process, store, and transmit protected
health information (PHI), see HIPAA Overview.
Are You a First-time User of Amazon SageMaker?
If you are a first-time user of Amazon SageMaker, we recommend that you do the following:
1. Read How Amazon SageMaker Works (p. 2) – This section provides an overview of Amazon
SageMaker, explains key concepts, and describes the core components involved in building AI solutions
with Amazon SageMaker. We recommend that you read this topic in the order presented.
2. Read Get Started (p. 16) – This section explains how to set up your account and create your first
Amazon SageMaker notebook instance.
3. Try a model training exercise – This exercise walks you through training your first model. You use
training algorithms provided by Amazon SageMaker. For more information, see Get Started (p. 16).
4. Explore other topics – Depending on your needs, do the following:
• Submit Python code to train with deep learning frameworks – In Amazon SageMaker, you can use
your own training scripts to train models. For information, see Use Machine Learning Frameworks
with Amazon SageMaker (p. 440).
• Use Amazon SageMaker directly from Apache Spark – For information, see Use Apache Spark with
Amazon SageMaker (p. 440).
• Use Amazon AI to train and/or deploy your own custom algorithms – Package your custom
algorithms with Docker so you can train and/or deploy them in Amazon SageMaker. See Use Your
Own Algorithms or Models with Amazon SageMaker (p. 384) to learn how Amazon SageMaker
interacts with Docker containers, and for the Amazon SageMaker requirements for Docker images.
5. See the API Reference (p. 616) – This section describes the Amazon SageMaker API operations


How Amazon SageMaker Works
Amazon SageMaker is a fully managed service that enables you to quickly and easily integrate machine
learning-based models into your applications. This section provides an overview of machine learning
and explains how Amazon SageMaker works. If you are a first-time user of Amazon SageMaker, we
recommend that you read the following sections in order:
Topics
• Machine Learning with Amazon SageMaker (p. 2)
• Explore and Preprocess Data (p. 4)
• Train a Model with Amazon SageMaker (p. 4)
• Deploy a Model in Amazon SageMaker (p. 7)
How It Works: Next Topic
Machine Learning with Amazon SageMaker (p. 2)
Machine Learning with Amazon SageMaker
This section describes a typical machine learning workflow and summarizes how you accomplish those
tasks with Amazon SageMaker.
In machine learning, you "teach" a computer to make predictions, or inferences. First, you use an
algorithm and example data to train a model. Then you integrate your model into your application to
generate inferences in real time and at scale. In a production environment, a model typically learns from
millions of example data items and produces inferences in hundreds to less than 20 milliseconds.
The following diagram illustrates the typical workflow for creating a machine learning model:


As the diagram illustrates, you typically perform the following activities:
1. Generate example data—To train a model, you need example data. The type of data that you need
depends on the business problem that you want the model to solve (the inferences that you want

the model to generate). For example, suppose that you want to create a model to predict a number
given an input image of a handwritten digit. To train such a model, you need example images of
handwritten numbers.
Data scientists often spend a lot of time exploring and preprocessing, or "wrangling," example data
before using it for model training. To preprocess data, you typically do the following:
a. Fetch the data— You might have in-house example data repositories, or you might use datasets
that are publicly available. Typically, you pull the dataset or datasets into a single repository.
b. Clean the data—To improve model training, inspect the data and clean it as needed. For example, if
your data has a country name attribute with values United States and US, you might want to
edit the data to be consistent.
c. Prepare or transform the data—To improve performance, you might perform additional data
transformations. For example, you might choose to combine attributes. If your model predicts the
conditions that require de-icing an aircraft, instead of using temperature and humidity attributes
separately, you might combine those attributes into a new attribute to get a better model.
In Amazon SageMaker, you preprocess example data in a Jupyter notebook on your notebook
instance. You use your notebook to fetch your dataset, explore it, and prepare it for model training.
For more information, see Explore and Preprocess Data (p. 4). For more information about
preparing data in AWS Marketplace, see data preparation.
2. Train a model—Model training includes both training and evaluating the model, as follows:
• Training the model— To train a model, you need an algorithm. The algorithm you choose depends
on a number of factors. For a quick, out-of-the-box solution, you might be able to use one of
the algorithms that Amazon SageMaker provides. For a list of algorithms provided by Amazon
SageMaker and related considerations, see Use Amazon SageMaker Built-in Algorithms (p. 56).
You also need compute resources for training. Depending on the size of your training dataset and
how quickly you need the results, you can use resources ranging from a single general-purpose
instance to a distributed cluster of GPU instances. For more information, see Train a Model with
Amazon SageMaker (p. 4).
• Evaluating the model—After you've trained your model, you evaluate it to determine whether the
accuracy of the inferences is acceptable. In Amazon SageMaker, you use either the AWS SDK for
Python (Boto) or the high-level Python library that Amazon SageMaker provides to send requests to
the model for inferences.
You use a Jupyter notebook in your Amazon SageMaker notebook instance to train and evaluate
your model.
3. Deploy the model— You traditionally re-engineer a model before you integrate it with your
application and deploy it. With Amazon SageMaker hosting services, you can deploy your model
independently, decoupling it from your application code. For more information, see Deploy a Model on
Amazon SageMaker Hosting Services (p. 7).