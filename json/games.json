{"ids": ["1544b42f-5e83-4f48-9e7c-04d79779bc6f", "bc5758f1-12f1-4484-ab70-32eddc89d3b2", "a524fa59-736a-4d81-8f0b-5f6cd3137d76", "7a497411-452b-455e-80ac-c04fd612313b", "9fe95798-9561-4d60-bb73-82c64498db94", "9492d093-1538-4406-a12f-0471be3a63d5", "5835259f-4295-4231-b193-0775255c2f14", "7c04c074-752d-4616-b118-ecc97e5fdde3", "9828c392-c8a0-4ab8-94a1-e867587509b7", "4b0b74fe-fba5-44d4-ad42-50e747f4668b", "817c3878-502b-4027-8d8f-1643a0926ce4", "fd5617c1-5345-4371-89e0-fa027cdc7ce9", "2cdebf95-1da7-4e4f-81fc-5cd6baf0beaa", "b2e69957-4a7a-455b-a1ff-b1eda6969fdc", "5ba107fb-bf9e-489c-9f4a-42aa81bc7429", "bf2d84e3-af5c-4bfc-b230-453fc074c992", "4f033f53-4392-47a0-a8cd-e1f17225a457", "0d5115af-f9d5-4170-bcc1-40ef70de8ff4", "7bd51b47-6d1a-447b-b1dc-1d11ccfd4c63", "ec0bd53b-adf5-4ab6-8c30-e7775179f259", "ce691bc4-8da5-4aaf-81e2-dcacdda23cc6", "ae741c1c-cb74-43f0-b723-ef7c48a7fb40", "9b3a4416-230a-4d59-9c9b-2abf5eea671b", "0b175e81-6b70-4589-8ae9-44cd3e856eb8", "4a958087-f657-4d52-a230-3ea7bb7f197a", "f27c40b1-1c25-4052-9137-86440810b885", "3ed0e6cc-f429-44a9-9efd-de5316495747", "be0a3469-c599-4f5e-b251-2c11502f4b28", "a1b0d8a7-cf80-4ad3-bb39-136049e3dd53", "0dbbbbca-6503-4e19-a57b-6592386c1510", "49018b75-833e-4f9e-bdd7-d4d037104808", "e395e78d-bc03-4aa6-8a0b-08f5fa49285b", "12380944-9fbc-4e75-a6b8-aeb463dd9a27", "63b71504-32b1-45e1-b209-f5102f80a7c8", "af481c3b-02fd-4a4e-8c84-745b3796d164", "39914aea-9192-4606-80bc-96d0a29bc72a", "010d5243-0d75-44c2-bc6d-a8f21623cf2d", "c7ffc49b-5056-4917-bb36-81b73bfc89ab", "4b6c6761-7c55-4971-b294-d06ff489ebab", "f0a31459-d6c0-4903-bfaf-6228bf8c1472", "54a89cd0-d799-487c-bb6d-e48f54867107", "f33db88e-0233-4be9-a9cc-799c7c26ba98", "7831bd83-7fa3-427c-a872-cad94b7a64ba", "5e95119a-ae4e-4cd2-9816-1bb08f8ba1eb", "410353c8-e578-41cd-ba4c-ce5f4f30442e", "17790b20-803a-46bb-96ee-c687bf5a0858", "58bebf3d-9397-43c9-8d08-adfc7d21d347", "2c3e110a-9b7f-4324-8b20-58adf25965ca", "b267cff8-5d79-4ee9-939d-a9e5050d87bb", "c9bc6c72-c630-45c5-b347-de07d10ac88f", "35e17471-1953-4a40-adbb-d0055f456f6b", "329f8aa8-c377-4b21-a315-542015440581", "5ba6c3f8-4d45-4cc8-97c2-7a18ebd9ee4c", "020edad2-37b8-483d-866f-d7a0aa805e5e", "ef384df6-1b8e-44b7-93d3-e30acb92ff82", "403f1590-1e2d-4a66-938f-33c9c0db69ea", "3a6f4f3c-5e94-4930-99c4-50b994457b45", "6afcfd5e-3561-40e5-ac48-a4870748501d", "1b11126d-8b92-4769-bf62-66b2a71c0386", "a2638838-7d59-4dee-9fbf-44be5404b434", "b757ac52-ed3a-4642-843b-963e8122f8b0", "1ce920ff-0720-4ebf-bdf5-6af6f50e76d8", "ef365d5b-573a-4da8-bf1f-0642c5fcf34c", "cac5d19e-321a-40c0-8524-e45165c9bff4", "1cf65a5f-7061-490b-9d67-c63f53d180a3", "7f77a620-3964-42db-a3a0-a9a179239b84", "20a31d70-839a-458c-9cc3-be500f7b964e", "72c0634b-dc8b-49a0-bcda-c388a7dd8672", "2261a6c0-7694-4a7d-a445-a427a7b803f3", "d539a38f-f8ff-4030-aa1e-f4ae70726fc8", "c6487a5d-f09c-4579-9a16-9f77bf480072", "f3fabcd9-0a52-4f48-a7d1-ce9d1dc9d052", "cb6b550e-5c06-4d05-9487-874c79b4e613", "a1691e80-a14f-4d6f-9d4e-da8847bf4379", "e064c533-8ca5-4015-86e5-565fb14cdac9", "cbd0fc18-46df-4f34-8a3a-530a1e982e36", "4445976a-6cf0-4cb0-89a3-5165d6c4b1ef", "1e6f2e6a-a3b0-4f7e-b093-ff71f98643a3", "2a772b22-f1cb-4973-a8b9-68401b18dd0c", "74f7691c-8709-4df1-b3b4-48362cf98c1b", "18bb1b09-eaed-41a0-a992-73aaa939d89e", "17f5d88d-e39b-405b-8afa-3c53c2b65186", "18f5e34d-3aef-4a41-aad9-770488c24a25", "ce748e8d-5441-480f-b7a0-3d70ba4ecc3a", "8f4473d1-580c-4fc6-ad2d-cc0701f3b6e3", "8ff7ce05-8fd2-4319-9e2d-75636332195b", "890d34a1-d5e7-4062-8d73-68ee6e21470c", "98afc3fc-176a-4600-a324-1ec8d7d0021e", "b1fa0cff-a1ba-446e-a720-eb654d7bab5f", "facf8cb1-24e0-43e3-b78f-c119374e70c5", "82706fa6-0fd6-4990-8dcf-9c615916db73", "922bd4c2-261d-4717-8da6-21a3c043e381", "2cb86612-998d-4d19-8531-8557a8414a1c", "94b3ae6d-3101-4ce0-94df-ee0c7bba65be", "e844e311-5d13-48e2-9ee2-fdff0e9bb08f", "edd61695-012d-49ad-aa0f-bec10cb37272", "beea66bb-4283-4c6b-aba7-7a37dcc0608f", "ad0d2170-1432-4f8a-abed-b05947f908f7", "222dbf7d-106d-4d3a-9675-089ec11708ac", "240b6011-7e78-4329-9d49-93bbd75a2f58", "d5c310e9-0c58-4162-bbdb-7a88c7a5d32e", "7dc23188-7d1b-4270-96cb-2f9e5f0b4fa5", "f1add7b8-e883-47b9-af26-b3a511605fb2", "b865787b-76fc-4d66-8360-0a9320c6064b", "07096c74-5129-4518-8fc2-2bf2c1d3d09f", "367aabf7-c1f9-45ec-b471-9193a3cb1a6c", "46850c1f-efb4-44d7-aa36-f9841c8099ae", "17289445-450b-4bfa-9067-ec78a84f50c9", "fcd8d600-c41b-4d4a-8d1e-59f1249b53e9", "50456a73-4e21-4f8c-aa1a-7e0ba5982350", "5b2c213d-a9b3-4224-88f1-b73ef595dbdb", "ca815dc2-bd8e-4f5e-aeb1-54aaa068fc9a", "ba501f32-4f79-4c65-8d4a-0ed8c64f88af", "f297ce09-480a-4241-a09d-ce081ae57c6d", "bed03844-747f-4cb0-b3aa-4dbd849b0929", "da430d3f-fa15-4064-abc4-297785767474", "71f2699a-25c5-4c53-bb4b-449531a931c0", "6a29474a-f17c-4ca5-8d89-4f5a9fd37016", "0e75c43d-ea89-4289-9e9a-7bb0e69c64f0", "86a8ac7e-f73c-45d6-ae74-4aea7439028f", "04397e48-3153-40f5-86ba-d1e328c8d674", "42e64155-63f6-4920-9112-d22f67dd6c83", "d224943c-9dbe-4501-b8af-b7219393270d", "eb639a19-dd27-4ffc-a257-9e3ce0346375", "3e6e5a2e-94a3-4f44-9983-89b2344b5dba", "da3f9335-a568-40ed-a05c-67e0346d4347", "55a3e5e1-014f-4cd8-8309-2589f360242c", "d59b0e4a-731a-4a2f-92a2-1da8b2c098f7", "739c1053-2a42-4562-9e89-5c07d3532c22", "838998f3-ab85-4496-9da7-e967ac470cae", "af7fbac2-badf-460a-9a76-643e09ce518b", "0c32b26c-18d0-4f6c-bfd4-7229de3935d0", "5c433e23-d25e-4291-9c0f-8c9ee6273082", "e350a394-2bca-44b2-8507-154466bd3e81", "427d3a2e-5001-40a3-bf67-3a449e3d6f43", "d9af2538-70ef-4a48-8464-5ddf7bb431e4"], "embeddings": null, "documents": ["1Introduction\nWhy Play Games?\nFluency in reading and writing requires a complex set of skills that need to be practiced over time. Th  e \nhundreds of games and activities in this book provide engaging practice ideas to practice key skill sets \nwhile respecting students' needs for variety, movement, and fun!\nWho Are Th  ese Games For?\nTh  ese games are designed for anyone teaching students of any age to read, spell, or write. Th  ey can be \nused with any language arts curriculum to add multi-sensory practice, fun, and engagement!\nHow it Works\nTh  e Logic of English Game Book is full of games that strengthen literacy skills. Th  ere are active and fun \nways to strengthen phonemic awareness skills, drill phonograms, build reading fl  uency, practice spelling,", "ways to strengthen phonemic awareness skills, drill phonograms, build reading fl  uency, practice spelling, \nand improve comprehension and vocabulary. Th  ese games equip parents and teachers to provide all sorts \nof multi-sensory and engaging practice, including high-energy active games, creative games, card games, \ntactile games, and more. Whether you\u2019ve got ten minutes or all day, these games can help solidify skills \nand deepen mastery at each step of the learning process.\nMost games in this book have alternative directions for group and individual settings. Some are designed \nspecifi  cally for one setting or the other. Each game has a summary of the materials needed, the suggested \nage range, and the approximate time required to play that game.\nGame Book Expansion Pack", "specifi  cally for one setting or the other. Each game has a summary of the materials needed, the suggested \nage range, and the approximate time required to play that game.\nGame Book Expansion Pack\nEight full-color game boards with a laminate coating \ndesigned for dry erase markers so you can choose \nphonograms or words to practice. Used in games like \nSilent E Ladders and Slides, Spelling Scramble, and \nPhonogram Bubble Race. Available for purchase at \nstore.logicofenglish.com.\nAdditional Materials\nMany games in this book call for the use of common \nhousehold or classroom materials such as pencils, markers,\npaper, dice, and toys. Many of the games also call for Logic\nof English reusable materials. Learn more about these\nand other helpful resources at www.logicofenglish.com.", "paper, dice, and toys. Many of the games also call for Logic\nof English reusable materials. Learn more about these\nand other helpful resources at www.logicofenglish.com.\nLOE Reusable Materials Used in Th  ese Games\n\u2022 Phonogram Game Tiles\n\u2022 Phonogram Game Cards\n\u2022 Basic Phonogram Flash Cards\n\u2022 Student Whiteboards\nstore.logicofenglish.com.\n2 Logic of English Game Book\nGlossary of Terms\nPhonograms - written representations of speech sounds, such as a, b, ou, tch, and eigh. Th  e phonogram \ngames in this book are designed to help students practice the phonograms\u2019 sounds. When you play a \nphonogram game, refer to the phonograms by the sound(s) they make, rather than by letter names.\nPhonemic Awareness - the ability to identify individual sounds within spoken words.", "phonogram game, refer to the phonograms by the sound(s) they make, rather than by letter names.\nPhonemic Awareness - the ability to identify individual sounds within spoken words. \nTh  is skill is generally practiced auditorily and verbally without written text. \nSegmenting  - breaking words into their individual sounds.\nBlending - combining individual sounds into whole words. \nMorphemes - units of meaning within a word, including roots, prefi  xes, and suffi   xes.\nMorphology  - the study of roots, prefi  xes, and suffi   xes and how they work together to form words. \nTemplates  - reproducible templates used in some of the games. Th  ey can be found in the back of this \nbook. Th  ese templates may be copied.\nBoards  - full color game boards found in the Game Book Expansion Pack.", "book. Th  ese templates may be copied.\nBoards  - full color game boards found in the Game Book Expansion Pack.\nLogic of English\u00ae creates integrated\nlanguage arts curriculum that\nsystematically intertwines the\ndi\ufb00  erent skills students need to \nbecome strong readers and writers.\n \u2022 Phonemic Awareness\n \u2022 Systematic Phonics\n \u2022 Fluency\n \u2022 Vocabulary\n \u2022 Comprehension\n \u2022 Composition\n \u2022 Spelling\n \u2022 Grammar\n \u2022 Handwriting\nLearn more about all of our products at www.logicofengish.com.\nFoundations\nAges 4-7Essentials\nAges 8+\nSounding Out the \nSight Words\nAll Ages3\n Table of Contents\nPhonemic Awareness Games 7\nGame Ages Page\nSound Detective 4+ 8\nSorting Sounds 4+ 9\nCompound Blending Baskets 4-12 10\nCompound Word Blend & Find 4-12 11\nBlending Animal Names 4-8 12\nBlend and Do 4+ 13", "Phonemic Awareness Games 7\nGame Ages Page\nSound Detective 4+ 8\nSorting Sounds 4+ 9\nCompound Blending Baskets 4-12 10\nCompound Word Blend & Find 4-12 11\nBlending Animal Names 4-8 12\nBlend and Do 4+ 13\nConsonant Blending Game 4-12 14Game Ages Page\nBlending I Spy 4+ 15\nFirst Sound Bingo 4+ 16\nVowel Stacks 4-12 17\nChoose the Object 4-8 18\nSegmenting I Spy 4-12 19\nTwenty Sound Questions 6+ 20\nActive Phonogram Games 21\nGame Ages Page\nPhonogram Light-Up 4-10 22\nPhonogram Retriever 4-9 23\nPhonogram Hop 4-6 24\nPhonogram Aerobics 4-8 25\nPhonogram Color Grab 4-8 26\nPhonogram Journey 4-8 27\nPhonogram Scatter 4-10 28\nPhonogram Obstacle Course 4-10 29\nPhonogram Bounce 4-6 30\nPhonogram Hopscotch 5-10 31\nPhonogram Maze 4-8 32\nPhonogram Mountain 4-8 33\nPhonogram Tightrope 4-8 34", "Phonogram Scatter 4-10 28\nPhonogram Obstacle Course 4-10 29\nPhonogram Bounce 4-6 30\nPhonogram Hopscotch 5-10 31\nPhonogram Maze 4-8 32\nPhonogram Mountain 4-8 33\nPhonogram Tightrope 4-8 34\nPhonogram Stop and Go 4-10 35\nPhonogram Pyramid 5-9 36\nPhonogram Hop Along 5-10 37\nPhonogram Shoot 5-10 38Game Ages Page\nLive Phonogram Board Game 4-9 39\nPhonogram Telephone 5-9 40\nPhonogram Back Writing 4-10 41\nSnatch the Match! 4-10 42\nPhonogram Writing Race 5-10 43\nPhonogram Arcade Race 4-12 44\nPhonogram Treasure Hunt 4-10 45\nPhonogram Bowling 4-10 46\nPhonogram Fishing 4-9 47\nPhonogram Football 6+ 48\nPhonogram Soccer 6+ 49\nPhonogram Baseball 6+ 50\nPhonogram Basketball 6+ 51\nPhonogram Marco Polo 5-10 52\nPhonogram Collection 5-9 53\nEcholocation 5-10 54\nPhonogram Airplanes 5-10 55\nPhonogram Card Games 57", "Phonogram Baseball 6+ 50\nPhonogram Basketball 6+ 51\nPhonogram Marco Polo 5-10 52\nPhonogram Collection 5-9 53\nEcholocation 5-10 54\nPhonogram Airplanes 5-10 55\nPhonogram Card Games 57\nGame Ages Page\nPhonogram Snatch 4-10 58\nRotten Egg 4-10 59\nSpeed 8+ 60\nLast One! 5-10 61\nPhonogram Memory 4+ 62Game Ages Page\nSlap It! 5-12 63\nGo Fish! 4-8 64\nDragon 4-9 65\nABC Order Race 6-12 66\nPhonogram Train 4-7 674\n Logic of English Game BookPhonogram Board Games 69\nGame Ages Page\nPhonogram Bubble Race 4+ 70\nPhonogram Board Game 4-9 71\nPhonogram Bingo 4+ 72Game Ages Page\nPhonogram Tic-Tac-Toe 6+ 73\nVowel Bingo 4+ 74\nPhonogram Team-Up 4-10 75\nPhonogram Tile Games 77\nGame Ages Page\nPhonogram Corners 6-12 78\nPhonogram Sets and Runs 7+ 79Game Ages Page\nTen in a Row 4+ 80\nCreative Phonogram Games 81", "Vowel Bingo 4+ 74\nPhonogram Team-Up 4-10 75\nPhonogram Tile Games 77\nGame Ages Page\nPhonogram Corners 6-12 78\nPhonogram Sets and Runs 7+ 79Game Ages Page\nTen in a Row 4+ 80\nCreative Phonogram Games 81\nGame Ages Page\nPhonogram Collage 4-12 82\nCreate a Find 5-14 83\nPhonogram Nature Art 4-10 84Game Ages Page\nCreate a Book 4-7 85\nChalk It Up 4-9 86\nPhonogram Speed Games 87\nGame Ages Page\nBeat the Clock 5-12 88\nSee It - Say It - Write It 4-10 89\nPhonogram Flip 5-10 90\nPhonogram Race 5-10 91\nPhonogram Challenge 4-8 92Game Ages Page\nWrite and Erase 5-10 93\nTeacher Trouble 4-6 94\nLast One Standing 4-8 95\nPhonogram Read and Write 5-10 96\nActive Reading Games 97\nGame Ages Page\nReading Light-Up 4-10 98\nWord Retriever 4-7 99\nReading Journey 4-8 100\nWord Mountain 4-8 101\nReading Tightrope 4-7 102", "Phonogram Read and Write 5-10 96\nActive Reading Games 97\nGame Ages Page\nReading Light-Up 4-10 98\nWord Retriever 4-7 99\nReading Journey 4-8 100\nWord Mountain 4-8 101\nReading Tightrope 4-7 102\nReading Stop and Go 4-10 103\nReading Fluency Sort 6-10 104\nHigh-Frequency Word Run 6-12 105\nReading Tower 4-7 106\nReading Hop Along 5-10 107\nWord Maze 4-8 108\nIsland Reading Tour 4-7 109\nHigh-Frequency Word Scatter 4-9 110\nSnatch the Match! 5-10 111\nHigh-Frequency Word Stations 6+ 112\nWord Arcade Race 4-12 113\nReading Treasure Hunt 4-10 114\nWord Hopscotch 5-10 115Game Ages Page\nWord Bowling 4-10 116\nHigh-Frequency Word Fishing 4-9 117\nReading Football 6+ 118\nReading Soccer 6+ 119\nReading Baseball 6+ 120\nReading Basketball 6+ 121\nSilent E Machine 4-7 122\nSilent E Hopscotch 5-10 123", "High-Frequency Word Fishing 4-9 117\nReading Football 6+ 118\nReading Soccer 6+ 119\nReading Baseball 6+ 120\nReading Basketball 6+ 121\nSilent E Machine 4-7 122\nSilent E Hopscotch 5-10 123\nAirplane Reading 5-10 124\nReading Charades 4+ 125\nHigh-Frequency Word Race 4-7 126\nReading Y Words 5-9 127\nLong Vowel Hunt 5-8 128\nSilent E Store 5-9 129\nMarco Polo Word Game 5-10 130\nCompound Echolocation 5-10 131\nSuffix Collection 7-12 1325\n Reading Card Games 133\nGame Ages Page\nSort Those Words 6+ 134\nFluency Trail 4-9 135\nReading Trios 8+ 136\nGo Fish! 6-12 137Game Ages Page\nLong Vowel Sort 6+ 138\nFor My Birthday I Want a... 5-10 139\nPast Tense Memory Game 5+ 140\nFox in the Hen House 4-7 141\nReading Board Games 143\nGame Ages Page\nReading Bubble Race 4-9 144\nReading Board Game 4+ 145\nReading Bingo 4+ 146", "Past Tense Memory Game 5+ 140\nFox in the Hen House 4-7 141\nReading Board Games 143\nGame Ages Page\nReading Bubble Race 4-9 144\nReading Board Game 4+ 145\nReading Bingo 4+ 146\nReading Tic-Tac-Toe 5+ 147Game Ages Page\nVowel Race Track 6-12 148\nLong Vowel Switchback 5+ 149\nSilent E Board Game 4-9 150\nSilent E Ladders and Slides 6-10 151\nReading Speed Games 153\nGame Ages Page\nReading Beat the Clock 6+ 154\nSentence Builder 7+ 155Game Ages Page\nEraser Race 6+ 156\nActive Spelling Games 157\nGame Ages Page\nSpelling Treasure Hunt 5-10 158\nSpelling Obstacle Course 6-10 159\nSpelling Tiles Relay 4-9 160\nFly Swatter Spelling 4-9 161\nSpelling Journey 5-8 162\nWriting Race 6-10 163\nSpelling Arcade Race 6-12 164\nThe Spelling Circuit 6-12 165\nSpelling Balancing Act 7+ 166Game Ages Page\nTeam Spelling 7-12 167", "Spelling Journey 5-8 162\nWriting Race 6-10 163\nSpelling Arcade Race 6-12 164\nThe Spelling Circuit 6-12 165\nSpelling Balancing Act 7+ 166Game Ages Page\nTeam Spelling 7-12 167\nSpelling Football 6+ 168\nSpelling Soccer 6+ 169\nSpelling Baseball 6+ 170\nSpelling Basketball 6+ 171\nI\u2019m the Teacher 6+ 172\nSpelling I Spy 6+ 173\nSpelling Detectives 7+ 174\nSchwavenger Hunt 6+ 175\nSpelling Card Games 177\nGame Ages Page\nAdd and Take 7+ 178\nMake a Memory Game 6+ 179Game Ages Page\nGuess My Word 6+ 180\nHouse of Cards 7+ 181\nSpelling Board Games 183\nGame Ages Page\nWord Search 7+ 184\nSink and Spell 7+ 185\nSpelling Tic-Tac-Toe 6+ 186Game Ages Page\nCreate a Crossword Puzzle 8+ 187\nSpelling Scramble 7+ 188\nSpelling Tile Games 189\nGame Ages Page\nSpelling Hide and Go Seek 6-12 190\nCreating New Words 5+ 191", "Spelling Tic-Tac-Toe 6+ 186Game Ages Page\nCreate a Crossword Puzzle 8+ 187\nSpelling Scramble 7+ 188\nSpelling Tile Games 189\nGame Ages Page\nSpelling Hide and Go Seek 6-12 190\nCreating New Words 5+ 191\nSpeedy Spelling Tiles 6+ 192Game Ages Page\nHow Many Words? 7+ 193\nSpelling Scavenger Hunt 9+ 1946\n Logic of English Game BookCreative Spelling Games 195\nGame Ages Page\nRainbow Writing 7-12 196\nSpelling Magician 6-10 197\nType the Words 6+ 198\nWord Picture 7-14 199\nSpelling Collage 7+ 200\nSpelling Nature Art 5-9 201\nPipe Cleaner Spelling 7-10 202Game Ages Page\nY arn Spelling 7-10 203\nWord Quilt 4-10 204\nPicture Dictionary 7+ 205\nGuess My Picture 7+ 206\nStory Writing 8+ 207\nIllustrate the Equation 6+ 208\nSpelling Speed Games 209\nGame Ages Page\nRecord the Words 7-12 210", "Word Quilt 4-10 204\nPicture Dictionary 7+ 205\nGuess My Picture 7+ 206\nStory Writing 8+ 207\nIllustrate the Equation 6+ 208\nSpelling Speed Games 209\nGame Ages Page\nRecord the Words 7-12 210\nOther Handed Spelling 6-12 211\nSpeed Writing 6-12 212Game Ages Page\nTiny Spelling 7-12 213\nSpelling Graph Paper 6-9 214\nSpell It Loud 6-12 215\nTactile Spelling Activities 217\nGame Ages Page\nSalt Box Race 4-7 218\nPlaydough Carving 5-12 219\nWord Painting 6-12 220\nCotton Swab Erasing 6-12 221Game Ages Page\nBlind Spelling 6-12 222\nGlitter Glue 6-12 223\nSpelling Actions 4-12 224\nSet It To Music 7-12 225\nOther Spelling Games 227\nGame Ages Page\nCorrect the Teacher 7+ 228\nCompound Word Brainstorm 6+ 229Game Ages Page\nDictation Bookmark 6-12 230\nComprehension Activities 231\nGame Ages Page\nRead and Do 4-8 232", "Game Ages Page\nCorrect the Teacher 7+ 228\nCompound Word Brainstorm 6+ 229Game Ages Page\nDictation Bookmark 6-12 230\nComprehension Activities 231\nGame Ages Page\nRead and Do 4-8 232\nWhat Are Y ou Do-ING? 5-12 233\nReading Robot 5-10 234\nFive W\u2019s 7+ 235Game Ages Page\nCreate a Zoo! 6+ 236\nTravel Guide 6+ 237\nAdjective-Noun Corners 8-12 238\nWhat\u2019s That Emoji? 7+ 239\nMorpheme Activities 241\nGame Ages Page\nCon- or Com- Match-Up 8+ 242\nDefinition Match-Up 8+ 243\nMorpheme Brainstorm 12+ 244\nIllustrate It! 9+ 245Game Ages Page\nMorpheme Collage 8+ 246\nMorpheme Race 8+ 247\nNewspaper Highlight 7+ 248\nMorpheme Puzzle 7+ 249\nAppendix 251\nAppendix A: Word Lists 251\nAppendix B: Master Templates 259\nAppendix C: Game Lists 287Phonemic Awareness Games  Logic of English Game Book\n12", "Morpheme Puzzle 7+ 249\nAppendix 251\nAppendix A: Word Lists 251\nAppendix B: Master Templates 259\nAppendix C: Game Lists 287Phonemic Awareness Games  Logic of English Game Book\n12\nBlending Animal Names Ages 4-8\nSetting:  Individual & Group\nTime:  1-3 minutes\nSupplies:  Animal pictures or toys\nSet Up  How to Play\nIndividual\nChoose four to ten animals whose names are just \none syllable. Set out pictures or toys that represent \nthose animals. For an extra challenge, choose some \nmulti-syllable animal names.  The teacher segments the name of an animal, \nsaying the individual sounds with a pause between \nthem (example: /d-o-g/). The student must blend \nthe sounds back together into a word and hold up \nthe correct animal.\nGroup\nChoose animals whose names are just one syllable.", "them (example: /d-o-g/). The student must blend \nthe sounds back together into a word and hold up \nthe correct animal.\nGroup\nChoose animals whose names are just one syllable. \nFor an extra challenge, choose some multi-syllable \nanimal names. Set out pictures or toys that \nrepresent those animals.  \n \n \n The teacher segments the name of an animal, \nsaying the individual sounds with a pause between \nthem (example: /d-o-g/). The first player must \nblend the sounds back together into a word and \nhold up the correct animal. The rest of the players \ngive thumbs up if they agree with his answer or \nthumbs down if they disagree. If he is incorrect, he \nmay try again. Then another student takes a turn.\nSample Words\nOne-Syllable Words:\ndog, cat, fish, fly, goat, cow, mouse, deer, horse, pig,", "thumbs down if they disagree. If he is incorrect, he \nmay try again. Then another student takes a turn.\nSample Words\nOne-Syllable Words:\ndog, cat, fish, fly, goat, cow, mouse, deer, horse, pig, \nbird, owl, hen, ant, sheep, duck, mole, goose, bearMulti-Syllable Words:\nturtle, lion, rabbit, tiger, pony, squirrel, llama, panda, \nmonkey, turkey, gerbil, chicken, elephant, dinosaur\nVariations\nAnimal Actors\nSegment animal names and ask the student to \nblend the word together and act like the animal.\nDress-Up Blending\nSet out a pile of dress-up clothes. Segment a word \n(h-a-t) and ask the student to pick out that piece of \nclothing and put it on.Student Pairs\nGroup the students into pairs. Player A chooses \nthe name of one of the animals and says it with all", "(h-a-t) and ask the student to pick out that piece of \nclothing and put it on.Student Pairs\nGroup the students into pairs. Player A chooses \nthe name of one of the animals and says it with all \nthe sounds \u201cun-glued\u201d or segmented. Player B must \n\u201cglue\u201d or blend the sounds back together and find \nthe correct animal. Active Phonogram Games\n29\nPhonogram Obstacle Course Ages 4-10\nSetting:  Individual & Group\nTime:  7-15 minutes\nSupplies:  Whiteboards and dry erase markers or clipboards with paper and pencils, Phonogram Game \nCards, obstacles\nSet Up  How to Play\nIndividual\nSet up nine stations with a Phonogram Game Card \nand a dry erase marker or pencil at each station. Put \nobstacles between the stations to run around, crawl \nunder, balance on, or climb over. Give the student a", "and a dry erase marker or pencil at each station. Put \nobstacles between the stations to run around, crawl \nunder, balance on, or climb over. Give the student a \nwhiteboard or a clipboard with paper.The student follows the obstacle course, stopping \nat each station to read a phonogram, write it on \nthe whiteboard or clipboard, and show it to the \nteacher. When the teacher nods \u201cyes,\u201d the student \nmay go on to the next obstacle.\nGroup\nSet up nine stations around the room with a \nPhonogram Game Card and a dry erase marker or \npencil at each station. Put obstacles between the \nstations to run around, crawl under, balance on, or \nclimb over. Give each student a whiteboard or a \nclipboard with paper.  \n \n \n Assign a student referee to each station. The referee", "stations to run around, crawl under, balance on, or \nclimb over. Give each student a whiteboard or a \nclipboard with paper.  \n \n \n Assign a student referee to each station. The referee  \nmakes sure the phonogram is read and written \ncorrectly. One after another, the students follow the  \ncourse, stop at each station to read a phonogram, \nwrite it on the whiteboard or clipboard, and show \nit to the referee. When the referee nods \u201cyes,\u201d the \nstudent may go on to the next obstacle. When \na student finishes the course, he moves into the \nposition of a referee, freeing the referee to move \ninto the line to complete the obstacle course.\nVariations\nObstacle Relay Teams\nDivide the students into three equal teams. Set up \ntwo short obstacle courses. The members of Team", "into the line to complete the obstacle course.\nVariations\nObstacle Relay Teams\nDivide the students into three equal teams. Set up \ntwo short obstacle courses. The members of Team \nOne referee both courses for the first round. Team \nTwo forms a relay line at one course and Team \nThree forms a relay line at the other course. One \nplayer progresses through the course, reading and \nwriting the phonograms, then tags the next player. \nRace to be the fastest relay team. Then rotate the \nteams so that each team gets one chance to referee \nand two chances to race.Note: Adjust the setup to accommodate your \ngroup size. For example, with 24 students you \ncould have three teams of eight students, and two \ncourses with four stations. With 20 students you", "group size. For example, with 24 students you \ncould have three teams of eight students, and two \ncourses with four stations. With 20 students you \ncould have four teams of five students, and two \ncourses with five stations.Active Reading Games Logic of English Game Book\n110\nHigh-Frequency Word Scatter Ages 4-9\nSetting:  Individual & Group\nTime:  5-10 minutes\nSupplies:  High-frequency words to practice, index cards, pen\nSet Up  How to Play\nIndividual\nChoose five to twenty-five high-frequency words \nfor the student to practice and write each word on \ntwo index cards. Scatter the index cards around the \nroom.  \n \n \n The student picks up one card and reads the word \nout loud. He walks around the room searching for a \nmatch. When he finds the matching card, he picks", "room.  \n \n \n The student picks up one card and reads the word \nout loud. He walks around the room searching for a \nmatch. When he finds the matching card, he picks \nit up and reads the word out loud. If he reads the \nword correctly, he may go and find another word \nto match. If he does not read the word correctly, he \ntries again, with help from the teacher as needed. \nWhen he finds and reads all the matches, he wins!\nGroup\nChoose high-frequency words for the students \nto practice and write each word on two index \ncards. Make at least five pairs per student. Tell the \nstudents how many matches they should each find, \nbased on the number of cards you use. Scatter the \ncards around the room.  \n \n \n \n \n \n \n Each student picks up one card and reads the word", "students how many matches they should each find, \nbased on the number of cards you use. Scatter the \ncards around the room.  \n \n \n \n \n \n \n Each student picks up one card and reads the word \nout loud. All the students walk around the room \nsearching for a match. When a student finds the \nmatching card, he picks it up and reads the word to \nthe teacher. If he reads the word correctly, he may \ngo and find another word to match. If he does not \nread the word correctly, he tries again, with help \nfrom the teacher as needed. If another student is \nholding the matching card, they may play a tie-\nbreaking game to determine who will collect the \nmatch. Once students find their quota of matches, \nthey may either sit down or help other students. At \nthe end of the game, students take turns reading", "match. Once students find their quota of matches, \nthey may either sit down or help other students. At \nthe end of the game, students take turns reading \nthe words they found out loud to the group.\nVariations\nCompetition\nStudents race to find as many pairs as they can. \nThey must take each pair to the teacher and read \nthe word correctly before looking for another pair. \nThe student with the most pairs at the end wins!Timed Scatter\nSet a timer and record how long it takes the \nstudent to find all the pairs. Scatter the cards again \nand see if the student can beat her record! Active Spelling Games\n173\nSpelling I Spy Ages 6+\nSetting:  Individual & Group\nTime:  1-5 minutes\nSupplies:  Words to practice, index cards, pen, whiteboards and dry erase markers or pencils and notepads", "173\nSpelling I Spy Ages 6+\nSetting:  Individual & Group\nTime:  1-5 minutes\nSupplies:  Words to practice, index cards, pen, whiteboards and dry erase markers or pencils and notepads\nSet Up  How to Play\nIndividual\nChoose words to practice spelling and write them \non index cards. Hang the cards around the room \nin clear sight of the student. The teacher plays the \ngame with the student. The teacher and student \neach hold a whiteboard and dry erase marker, or a \npencil and notepad.  \n \n One player chooses a spelling word. He provides \na clue to which word he is thinking of by saying, \u201cI \nspy a word that ____.\u201d For example: \u201cI spy a word \nthat has two single-letter vowels.\u201d \u201cI spy a word \nthat has four consonants. \u201c \u201cI spy a word that is \nan antonym of ____.\u201d The other player guesses", "spy a word that ____.\u201d For example: \u201cI spy a word \nthat has two single-letter vowels.\u201d \u201cI spy a word \nthat has four consonants. \u201c \u201cI spy a word that is \nan antonym of ____.\u201d The other player guesses \nwhich word he spies by walking to where that word \nis hanging. When he finds the right word, both \nplayers write it.\nGroup\nChoose words to practice spelling and write them \non index cards. Hang the cards around the room \nin clear sight of all players. Give each student a \nwhiteboard and dry erase marker.  \n \n \n \n One player chooses a spelling word. He provides \na clue to which word he is thinking of by saying, \u201cI \nspy a word that ____.\u201d For example: \u201cI spy a word \nthat has two single-letter vowels.\u201d \u201cI spy a word \nthat has four consonants.\u201d \u201cI spy a word that is an", "spy a word that ____.\u201d For example: \u201cI spy a word \nthat has two single-letter vowels.\u201d \u201cI spy a word \nthat has four consonants.\u201d \u201cI spy a word that is an \nantonym of ____.\u201d Other players guess which word \nhe spies by walking to where that word is hanging. \nWhen they have found the right word, all the \nplayers write it.\nVariations\nChallenge\nInstead of hanging word cards around the room, \nchallenge students to describe the spelling of \nobjects they see in the room.Comprehension Activities Logic of English Game Book\n234\nReading Robot Ages 5-10\nSetting:  Individual & Group\nTime:  5-15 minutes\nSupplies:  Slips of paper, pen, objects or pictures of objects mentioned in the phrases\nSet Up  How to Play\nIndividual & Group\nWrite phrases from the list below on slips of paper", "Time:  5-15 minutes\nSupplies:  Slips of paper, pen, objects or pictures of objects mentioned in the phrases\nSet Up  How to Play\nIndividual & Group\nWrite phrases from the list below on slips of paper \nfor the student(s) to read, one phrase on each slip. \nCollect the items mentioned in the phrases or \nprovide pictures of the items.The students are robots. Each student draws a slip, \nreads the directions, and does what the directions \nsay. Multiple players take turns.  \nSample Phrases\nPut the dog next to the cow.\nPut the cat by the dog.\nPut the fish by the cat.\nPut the goat next to the cow.\nPut the frog on top of the goat.\nPut the duck on top of the fish.\nPut the hen by the cat.\nPut the pig by the frog.\nPut the cat next to the dog.\nPut the frog by the cat.\nPut the goat by the frog.", "Put the frog on top of the goat.\nPut the duck on top of the fish.\nPut the hen by the cat.\nPut the pig by the frog.\nPut the cat next to the dog.\nPut the frog by the cat.\nPut the goat by the frog.\nPut the pig on top of the frog.\nPut the hen by the fish.\nPut the cow next to the hen.Put the duck on top of the cow.\nPut the rooster on top of the barn.\nPut the horse by the tree.\nPut the cow by the horse.\nPut the sheep in the barn.\nPut the duck in front of the barn.\nPut the pig on the path.\nPut the dresser next to the bed.\nPut the rug by the bed and the \ndresser.\nPut the pillow on the bed.\nPut the blanket on the bed.\nPut the doll under the blanket.\nPut the bear on top of the blanket.Drive the train on the tracks.\nStop the train.\nDrive the train through the cave.\nDrive the train fast.", "Put the blanket on the bed.\nPut the doll under the blanket.\nPut the bear on top of the blanket.Drive the train on the tracks.\nStop the train.\nDrive the train through the cave.\nDrive the train fast.\nSwitch tracks.\nDrive the train slow.\nDrive the train up the hill.\nDrive the train down the hill.\nPark the train.\nPark the car by the train.\nMake the train go fast on the tracks.\nDrive the car on the road.\nMake the car stop.\nMake the car drive slow on the road.\nVariations\nRobotic Voices\nStudents may read the phrases in different voices.Challenge\nAsk students to write directions for other robots to \nfollow.Morpheme Activities Logic of English Game Book\n248\nNewspaper Highlight Ages 7+\nSetting:  Individual & Group\nTime:  5-10 minutes\nSupplies:  Newspapers, highlighters\nSet Up  How to Play", "follow.Morpheme Activities Logic of English Game Book\n248\nNewspaper Highlight Ages 7+\nSetting:  Individual & Group\nTime:  5-10 minutes\nSupplies:  Newspapers, highlighters\nSet Up  How to Play\nIndividual & Group\nProvide each student with a section of the \nnewspaper or have students find an article that \nthey are interested in. Provide each student with a \nhighlighter.  \n \n Each student reads their newspaper article and \nsearches for morphemes they have learned. When \na student finds one of the morphemes, he marks \nit with the highlighter. Once all the students finish \ntheir articles, they share each word they found, the \nmeaning of the morpheme, and the meaning of the \nword.\nVariations\nCompetition\nThe player who can find and define the most \nmorphemes wins!Composition Challenge", "meaning of the morpheme, and the meaning of the \nword.\nVariations\nCompetition\nThe player who can find and define the most \nmorphemes wins!Composition Challenge\nStudents create their own sentences using the \nwords that contain the selected morphemes.", "Introduction to Python Programming          SENIOR CONTRIBUTING AUTHORS UDAYAN DAS, SAINT MARY'S COLLEGE OF CALIFORNIA AUBREY LAWSON, WILEY CHRIS MAYFIELD, JAMES MADISON UNIVERSITY NARGES NOROUZI, UC BERKELEY", "OpenStax Rice University 6100 Main Street MS-375 Houston, Texas 77005  To learn more about OpenStax, visit https://openstax.org. Individual print copies and bulk orders can be purchased through our website.  \u00a92024 Rice University. Textbook content produced by OpenStax is licensed under a Creative Commons Attribution 4.0 International License (CC BY 4.0). Under this license, any user of this textbook or the textbook contents herein must provide proper attribution as follows:   - If you redistribute this textbook in a digital format (including but not limited to PDF and HTML), then you must retain on every page the following attribution:  \u201cAccess for free at openstax.org.\u201d - If you redistribute this textbook in a print format, then you must include on every physical page the following attribution: \u201cAccess for free at openstax.org.\u201d - If you redistribute part of this textbook, then you must retain in every digital format page view (including but not limited to PDF and HTML) and on every physical printed page the following attribution:  \u201cAccess for free at openstax.org.\u201d - If you use this textbook as a bibliographic reference, please include https://openstax.org/details/books/introduction-python-programming in your citation.  For questions regarding this licensing, please contact support@openstax.org. This book utilizes the OpenStax Python Code Runner. The code runner is developed by Wiley and is All Rights Reserved.  Trademarks The OpenStax name, OpenStax logo, OpenStax book covers, OpenStax CNX name, OpenStax CNX logo, OpenStax Tutor name, Openstax Tutor logo, Connexions name, Connexions logo, Rice University name, and Rice University logo are not subject to the license and may not be reproduced without the prior and express written consent of Rice University.  DIGITAL VERSION ISBN-13 978-1-961584-45-7 ORIGINAL PUBLICATION YEAR 2024 1 2 3 4 5 6 7 8 9 10 CJP 24", "OPENSTAX  OpenStax provides free, peer-reviewed, openly licensed textbooks for introductory college and Advanced Placement\u00ae courses and low-cost, personalized courseware that helps students learn. A nonprofit ed tech initiative based at Rice University, we\u2019re committed to helping students access the tools they need to complete their courses and meet their educational goals.  RICE UNIVERSITY  OpenStax is an initiative of Rice University. As a leading research university with a distinctive commitment to undergraduate education, Rice University aspires to path-breaking research, unsurpassed teaching, and contributions to the betterment of our world. It seeks to fulfill this mission by cultivating a diverse community of learning and discovery that produces leaders across the spectrum of human endeavor.    PHILANTHROPIC SUPPORT  OpenStax is grateful for the generous philanthropic partners who advance our mission to improve educational access and learning for everyone. To see the impact of our supporter community and our most updated list of partners, please visit openstax.org/foundation.  Arnold Ventures Chan Zuckerberg Initiative Chegg, Inc. Arthur and Carlyse Ciocca Charitable Foundation Digital Promise Ann and John Doerr Bill & Melinda Gates Foundation Girard Foundation Google Inc. The William and Flora Hewlett Foundation The Hewlett-Packard Company Intel Inc. Rusty and John Jaggers The Calvin K. Kazanjian Economics Foundation Charles Koch Foundation Leon Lowenstein Foundation, Inc. The Maxfield Foundation Burt and Deedee McMurtry Michelson 20MM Foundation National Science Foundation The Open Society Foundations Jumee Yhu and David E. Park III Brian D. Patterson USA-International Foundation The Bill and Stephanie Sick Fund Steven L. Smith & Diana T. Go Stand Together Robin and Sandy Stuart Foundation The Stuart Family Foundation Tammy and Guillermo Trevi\u00f1o Valhalla Charitable Foundation White Star Education Foundation Schmidt Futures William Marsh Rice University", "CON TENTS\nPreface 1\nStatements 7 1\nIntroduction 7\n1.1Backgr ound 8\n1.2Input/output 10\n1.3Variables 14\n1.4String basics 16\n1.5Number basics 20\n1.6Error messages 24\n1.7Comments 27\n1.8Why Python? 31\n1.9Chapter summary 34\nExpr essions 39 2\nIntroduction 39\n2.1The Python shell 40\n2.2Type conversion 42\n2.3Mixed data types 45\n2.4Floating-point err ors 48\n2.5Dividing integers 51\n2.6The math module 54\n2.7Formatting code 60\n2.8Python car eers 65\n2.9Chapter summary 67\nObjects 71 3\nIntroduction 71\n3.1Strings r evisited 71\n3.2Formatted strings 76\n3.3Variables r evisited 79\n3.4List basics 83\n3.5Tuple basics 85\n3.6Chapter summary 88\nDecisions 91 4\nIntroduction 91\n4.1Boolean values 91\n4.2If-else statements 964.3Boolean oper ations 100\n4.4Oper ator pr ecedence 104\n4.5Chained decisions 107", "3.5Tuple basics 85\n3.6Chapter summary 88\nDecisions 91 4\nIntroduction 91\n4.1Boolean values 91\n4.2If-else statements 964.3Boolean oper ations 100\n4.4Oper ator pr ecedence 104\n4.5Chained decisions 107\n4.6Nested decisions 113\n4.7Conditional e xpressions 116\n4.8Chapter summary 118\nLoops 121 5\nIntroduction 121\n5.1While loop 121\n5.2For loop 125\n5.3Nested loops 129\n5.4Break and continue 133\n5.5Loop else 137\n5.6Chapter summary 140\nFunctions 145 6\nIntroduction 145\n6.1Defining functions 145\n6.2Contr ol flo w149\n6.3Variable scope 153\n6.4Parameters 158\n6.5Return values 163\n6.6Keywor d arguments 168\n6.7Chapter summary 170\nModules 173 7\nIntroduction 173\n7.1Module basics 174\n7.2Importing names 177\n7.3Top-le vel code 180\n7.4The help function 184\n7.5Finding modules 189\n7.6Chapter summary 194\nStrings 197 8", "Modules 173 7\nIntroduction 173\n7.1Module basics 174\n7.2Importing names 177\n7.3Top-le vel code 180\n7.4The help function 184\n7.5Finding modules 189\n7.6Chapter summary 194\nStrings 197 8\nIntroduction 197\n8.1String oper ations 197\n8.2String slicing 200\n8.3Sear ching/testing strings 204\n8.4String formatting 209\nAccess for fr ee at openstax.or g8.5Splitting/joining strings 217\n8.6Chapter summary 220\nLists 223 9\nIntroduction 223\n9.1Modifying and iter ating lists 223\n9.2Sorting and r eversing lists 226\n9.3Common list oper ations 229\n9.4Nested lists 231\n9.5List compr ehensions 234\n9.6Chapter summary 238\nDictionaries 241 10\nIntroduction 241\n10.1 Dictionary basics 241\n10.2 Dictionary cr eation 243\n10.3 Dictionary oper ations 245\n10.4 Conditionals and looping in dictionaries 250", "9.6Chapter summary 238\nDictionaries 241 10\nIntroduction 241\n10.1 Dictionary basics 241\n10.2 Dictionary cr eation 243\n10.3 Dictionary oper ations 245\n10.4 Conditionals and looping in dictionaries 250\n10.5 Nested dictionaries and dictionary compr ehension 256\n10.6 Chapter summary 260\nClasses 265 11\nIntroduction 265\n11.1 Object-oriented pr ogramming basics 265\n11.2 Classes and instances 267\n11.3 Instance methods 272\n11.4 Overloading oper ators 276\n11.5 Using modules with classes 281\n11.6 Chapter summary 283\nRecursion 287 12\nIntroduction 287\n12.1 Recursion basics 287\n12.2 Simple math r ecursion 289\n12.3 Recursion with strings and lists 292\n12.4 More math r ecursion 294\n12.5 Using r ecursion to solve pr oblems 297\n12.6 Chapter summary 301Inheritance 303 13\nIntroduction 303", "12.3 Recursion with strings and lists 292\n12.4 More math r ecursion 294\n12.5 Using r ecursion to solve pr oblems 297\n12.6 Chapter summary 301Inheritance 303 13\nIntroduction 303\n13.1 Inheritance basics 303\n13.2 Attribute access 306\n13.3 Methods 310\n13.4 Hier archical inheritance 316\n13.5 Multiple inheritance and mixin classes 320\n13.6 Chapter summary 323\nFiles 327 14\nIntroduction 327\n14.1 Reading fr om files 327\n14.2 Writing to files 331\n14.3 Files in differ ent locations and working with CSV files 335\n14.4 Handling e xceptions 339\n14.5 Raising e xceptions 344\n14.6 Chapter summary 347\nData Science 349 15\nIntroduction 349\n15.1 Introduction to data science 349\n15.2 NumPy 352\n15.3 Pandas 354\n15.4 Explor atory data analysis 362\n15.5 Data visualization 368\n15.6 Summary 375\nAnswer Ke y379", "Introduction 349\n15.1 Introduction to data science 349\n15.2 NumPy 352\n15.3 Pandas 354\n15.4 Explor atory data analysis 362\n15.5 Data visualization 368\n15.6 Summary 375\nAnswer Ke y379\nInde x403\nAccess for fr ee at openstax.or gPreface\nAbout OpenStax\nOpenStax is part of Rice University , which is a 501(c)(3) nonpr ofit charitable corpor ation. As an educational\ninitiative, it 's our mission to impr ove educational access and learning for e veryone. Thr ough our partnerships\nwith philanthr opic or ganizations and our alliance with other educational r esour ce companies, we 're breaking\ndown the most common barriers to learning. Because we belie ve that e veryone should and can have access to\nknowledge.\nAbout OpenStax Resour ces\nCustomization", "down the most common barriers to learning. Because we belie ve that e veryone should and can have access to\nknowledge.\nAbout OpenStax Resour ces\nCustomization\nIntroduction to Python Pr ogramming is licensed under a Cr eative Commons Attribution 4.0 International (C C\nBY) license, which means that you can distribute, r emix, and build upon the content, as long as you pr ovide\nattribution to OpenStax and its content contributors.\nBecause our books ar e openly licensed, you ar e free to use the entir e book or select only the sections that ar e\nmost r elevant to the needs of your course. Feel fr ee to r emix the content b y assigning your students certain\nchapters and sections in your syllabus, in the or der that you pr efer. You can e ven pr ovide a dir ect link in your", "chapters and sections in your syllabus, in the or der that you pr efer. You can e ven pr ovide a dir ect link in your\nsyllabus to the sections in the web vie w of your book.\nInstructors also have the option of cr eating a customized version of their OpenStax book. Visit the Instructor\nResour ces section of your book page on OpenStax.or g for mor e information.\nArt attribution\nInIntroduction to Python Pr ogramming , most photos and thir d-party illustr ations contain attribution to their\ncreator , rights holder , host platform, and/or license within the caption. Because the art is openly licensed,\nanyone may r euse the art as long as the y provide the same attribution to its original sour ce. T o maximize", "anyone may r euse the art as long as the y provide the same attribution to its original sour ce. T o maximize\nreadability and content flo w, some art does not include attribution in the te xt. This art is part of the public\ndomain or under a C C0 or similar license, and can be r eused without attribution. For illustr ations (e.g. gr aphs,\ncharts, etc.) that ar e not cr edited, use the follo wing attribution: Cop yright Rice University , OpenStax, under C C\nBY 4.0 license.\nErrata\nAll OpenStax te xtbooks under go a rigor ous r eview pr ocess. Ho wever, like any pr ofessional-gr ade te xtbook,\nerrors sometimes occur . Since our books ar e web-based, we can make updates periodically when deemed", "errors sometimes occur . Since our books ar e web-based, we can make updates periodically when deemed\npedagogically necessary . If you have a corr ection to suggest, submit it thr ough the link on your book page on\nOpenStax.or g. Subject matter e xperts r eview all err ata suggestions. OpenStax is committed to r emaining\ntranspar ent about all updates, so you will also find a list of past and pending err ata changes on your book\npage on OpenStax.or g.\nFormat\nYou can access this te xtbook for fr ee in web vie w or PDF thr ough OpenStax.or g. The web vie w is the\nrecommended format because it is the most accessible\u2014including being W CAG 2.1 AA compliant\u2014and most\ncurrent.\nAbout Introduction to Python Pr ogramming", "recommended format because it is the most accessible\u2014including being W CAG 2.1 AA compliant\u2014and most\ncurrent.\nAbout Introduction to Python Pr ogramming\nIntroduction to Python Pr ogramming provides a compr ehensive foundation in pr ogramming concepts and\nskills, and is aligned to the scope of most intr oductory courses. A wide arr ay of scenarios, conte xts, and\nproblems r eflect pr ogramming applications in many disciplines and car eers. The offering is suitable for a\ndiverse learner audience, including those pursuing computer science, business, science, social science,\nstatistics, data science, and r elated ar eas of study and emplo yment.Preface 1Introduction to Python Pr ogramming is an inter active offering that teaches basic pr ogramming concepts,", "statistics, data science, and r elated ar eas of study and emplo yment.Preface 1Introduction to Python Pr ogramming is an inter active offering that teaches basic pr ogramming concepts,\nproblem-solving skills, and the Python language using hands-on activities. The r esour ce includes a unique,\nintegr ated code runner , through which students can immediately apply what the y learn to check their\nunderstanding. Embedded videos, critical thinking e xercises, and e xplor ations of e xternal pr ogramming tools\nand activities all contribute to a meaningful and supportive learning e xperience.\nThe content is or ganized in chapters, with each chapter containing 6-8 sections. Each section follo ws the\npattern:\n\u2022Learning objectives\n\u20221\u20133 subsections\n\u2022Programming pr actice", "The content is or ganized in chapters, with each chapter containing 6-8 sections. Each section follo ws the\npattern:\n\u2022Learning objectives\n\u20221\u20133 subsections\n\u2022Programming pr actice\nThe learning objectives ar e designed to help r eaders identify the section 's focus. Each objective completes the\nsentence, \"By the end of this section you should be able to \". The pr ogramming pr actice aligns with the\nlearning objectives and gives r eaders an opportunity to apply concepts learned in the section.\nPedagogical Foundation\nConcise te xt and video-based animations\nIntroduction to Python Pr ogramming is designed to foster active learning and student engagement. It focuses\non inter activity and pr actice thr ough its integr ated code runner , videos, and links to e xternal envir onments and", "on inter activity and pr actice thr ough its integr ated code runner , videos, and links to e xternal envir onments and\nactivities. With that focus, the material is often mor e concise, with less te xt and mor e activity .\nEach section 's content is or ganized in subsections. The subsection begins with a concise intr oduction to the\nconcept, with ke y term definitions and brief conte xt for its r elevance and importance. The concept is then\nexplained in detail using video-based animations and inter active learning questions.\nAnimation videos use a step-b y-step appr oach to sho w the e xecution of Python code. Explanations for each\nstep describe Python syntax, sho w ho w fundamental pr ogramming concepts ar e used, illustr ate ho w variables", "step describe Python syntax, sho w ho w fundamental pr ogramming concepts ar e used, illustr ate ho w variables\nare assigned, emphasize ho w code e xecutes line b y line, apply pr oblem solving to cr eate pr ograms, and mor e.\nCHECKPOIN T\nDispla ying output t o the user\nAccess multimedia content (https://www .openstax.or g/r/displaying-output)\nLearning questions\nAfter intr oducing a ne w concept and e xplaining the concept with a video-based animation, each subsection\nincludes engagement in the form of learning questions. These questions r einfor ce the concepts taught,\nexplain concepts in mor e depth, dir ectly addr ess misconceptions and err ors commonly made b y new\nprogrammers, and teach r elated concepts.", "explain concepts in mor e depth, dir ectly addr ess misconceptions and err ors commonly made b y new\nprogrammers, and teach r elated concepts.\nExplanations ar e provided for the incorr ect answers. Incorr ect answers' e xplanations include why the answer is\nincorr ect and help guide the r eader to the corr ect answer .\nIncorr ect answer choices typically r epresent a misconception or ar e the r esult of making a common mistake.\nEven if the corr ect answer is achie ved, r eaders ar e encour aged to e xplor e the e xplanations to gain awar eness\nof these common misconceptions.\nProgramming pr actice e xercises\nEach section ends with 1 or 2 pr actice pr ograms. This book includes an integr ated pr ogramming envir onment,", "of these common misconceptions.\nProgramming pr actice e xercises\nEach section ends with 1 or 2 pr actice pr ograms. This book includes an integr ated pr ogramming envir onment,\nknown as the \"OpenStax Python Code Runner ,\" which allo ws readers to write pr ograms dir ectly in the br owser .2Preface\nAccess for fr ee at openstax.or gThe code runner r equir es the r eader to pr e-enter any input befor e running a pr ogram.\nA sample code runner\nConventions used in this book\nThe follo wing typogr aphical conventions ar e used thr oughout the book:\nBold\nIndicates vocabulary wor ds when first defined in the chapter .\nItalic\nIndicates emphasized te xt, filenames, and file e xtensions.\nConstant width", "Bold\nIndicates vocabulary wor ds when first defined in the chapter .\nItalic\nIndicates emphasized te xt, filenames, and file e xtensions.\nConstant width\nUsed for code listings and code elements within par agraphs. Code elements include variable names, Python\nkeywor ds, etc.\nConstant width bold\nShows commands or ke yboar d input that should be typed liter ally b y the user .\nEx:\nAbbr eviation for \"Example:\"Preface 3About the Authors\nSenior Contributing Authors\nSenior contributing authors, left to right: Udayan Das, Aubr ey Lawson, Chris Mayfield, and Nar ges Nor ouzi.\nUdayan Das, Saint Mary 's College of California\nUdayan Das, PhD , is an Associate Pr ofessor and Pr ogram Dir ector of Computer Science at Saint Mary 's College", "Udayan Das, Saint Mary 's College of California\nUdayan Das, PhD , is an Associate Pr ofessor and Pr ogram Dir ector of Computer Science at Saint Mary 's College\nof California. He r eceived his PhD in Computer Science and a master 's in Computer Engineering fr om the\nIllinois Institute of T echnology . His r esear ch inter ests include wir eless networks, computer science education\nand br oadening participation in computing, and kno wledge gr aph backed language models for technical\ndocument pr ocessing. He is also str ongly committed to incorpor ating ethics into computer science and\nengineering education, and the Computer Science pr ogram that he has de veloped and launched at Saint\nMary 's College of California centers ethics and social justice while teaching students to be high-quality", "Mary 's College of California centers ethics and social justice while teaching students to be high-quality\ncomputing pr ofessionals.\nAubr ey Lawson, Wile y\nAubr ey Lawson is a CS Content De veloper at zyBooks. She r eceived her bachelor 's and master 's degr ees in\nComputer Science fr om Clemson University , and her PhD r esear ch focuses on CS education.\nChris Mayfield, James Madison University\nChris Mayfield, PhD , is a Pr ofessor of Computer Science at James Madison University . His r esear ch focuses on\nCS education and pr ofessional de velopment at the under graduate and high school le vels. He r eceived a PhD in\nComputer Science fr om Pur due University and bachelor \u2019s degr ees in CS and German fr om the University of\nUtah.\nNarges Nor ouzi, UC Berkele y", "Computer Science fr om Pur due University and bachelor \u2019s degr ees in CS and German fr om the University of\nUtah.\nNarges Nor ouzi, UC Berkele y\nNarges Nor ouzi r eceived her MS and PhD fr om the University of T oronto, focusing on applied deep learning.\nShe has since been involved in working on applied machine learning pr ojects with a focus on biology and\neducation. Her CS education r esear ch focuses on using artificial intelligence in the classr oom to close the\nequity gap and leading student-center ed pr ograms that pr omote equity and access.\nContributing Authors\nContributing authors, left to right: Y amuna Rajasekhar and Reed Kanemaru.\nYamuna Rajasekhar , Wile y4Preface", "Contributing Authors\nContributing authors, left to right: Y amuna Rajasekhar and Reed Kanemaru.\nYamuna Rajasekhar , Wile y4Preface\nAccess for fr ee at openstax.or gYamuna Rajasekhar , PhD , is Dir ector of Content, Authoring, and Resear ch at Wile y. She works acr oss disciplines\non resear ch str ategy , authoring pedagogy and tr aining, and content de velopment for Computer Science and\nIT. She r eceived her MS and PhD fr om University of North Car olina at Charlotte, focusing on Computer\nEngineering education. Prior to joining Wile y as a content author , Yamuna was an Assistant Pr ofessor of\nComputer Engineering at Miami University , wher e her r esear ch was focused on assistive technology with\nembedded systems and Computer Engineering education.\nReed Kanemaru, Wile y", "Computer Engineering at Miami University , wher e her r esear ch was focused on assistive technology with\nembedded systems and Computer Engineering education.\nReed Kanemaru, Wile y\nReed Kanemaru earned a BS in Computer Science fr om University of California, Riverside in 2020 and an MS in\nComputer Science fr om University of California, Riverside in 2021. Since gr aduating, he has worked as a\nContent/Softwar e De veloper at zyBooks.\nReviewers\nMel Akhimiemona, Community College of Baltimor e County\nDoina Bein, Cal State Fullerton\nPhillip Br adfor d, University of Connecticut\nJames Br aman, Community College of Baltimor e County\nRobert Burr ows, College of DuPage\nDeena Engel, Ne w York University\nGabriel Ferr er, Hendrix College\nNazli Har dy, Millersville University", "James Br aman, Community College of Baltimor e County\nRobert Burr ows, College of DuPage\nDeena Engel, Ne w York University\nGabriel Ferr er, Hendrix College\nNazli Har dy, Millersville University\nMatthe w Hertz, University at Buffalo\nRania Hodhod, Columbus State University\nAkira Kawaguchi, The City College of Ne w York\nKevin Lin, University of W ashington\nMatin Pir ouz, Fr esno State\nMuhammad Rahman, Clayton State University\nJerry Reed, V alencia College\nKathleen T amerlano, Cuyahoga Community College\nLinda T ansil\nAcademic Integrity\nAcademic integrity builds trust, understanding, equity , and genuine learning. While students may encounter\nsignificant challenges in their courses and their lives, doing their o wn work and maintaining a high degr ee of", "significant challenges in their courses and their lives, doing their o wn work and maintaining a high degr ee of\nauthenticity will r esult in meaningful outcomes that will e xtend far be yond their college car eer. Faculty ,\nadministr ators, r esour ce pr oviders, and students should work together to maintain a fair and positive\nexperience.\nWe realize that students benefit when academic integrity gr ound rules ar e established early in the course. T o\nthat end, OpenStax has cr eated an inter active to aid with academic integrity discussions in your course.Preface 5attribution: Cop yright Rice University , OpenStax, under C C BY 4.0 license\nVisit our academic integrity slider (https://www .openstax.or g/r/academic-integrity-slider) . Click and dr ag icons", "Visit our academic integrity slider (https://www .openstax.or g/r/academic-integrity-slider) . Click and dr ag icons\nalong the continuum to align these pr actices with your institution and course policies. Y ou may then include\nthe gr aphic on your syllabus, pr esent it in your first course meeting, or cr eate a handout for students.\nAt OpenStax we ar e also de veloping r esour ces supporting authentic learning e xperiences and assessment.\nPlease visit this book' s page for updates. For an in-depth r eview of academic integrity str ategies, we highly\nrecommend visiting the International Center of Academic Integrity (ICAI) website at\nhttps://academicintegrity .org/(https://academicintegrity .org/).\nCommunity Hubs", "recommend visiting the International Center of Academic Integrity (ICAI) website at\nhttps://academicintegrity .org/(https://academicintegrity .org/).\nCommunity Hubs\nOpenStax partners with the Institute for the Study of Kno wledge Management in Education (ISKME) to offer\nCommunity Hubs on OER Commons\u2014a platform for instructors to shar e community-cr eated r esour ces that\nsupport OpenStax books, fr ee of char ge. Thr ough our Community Hubs, instructors can upload their o wn\nmaterials or do wnload r esour ces to use in their o wn courses, including additional ancillaries, teaching\nmaterial, multimedia, and r elevant course content. W e encour age instructors to join the hubs for the subjects", "material, multimedia, and r elevant course content. W e encour age instructors to join the hubs for the subjects\nmost r elevant to your teaching and r esear ch as an opportunity both to enrich your courses and to engage with\nother faculty . To reach the Community Hubs, visit www .oercommons.or g/hubs/openstax\n(https://oer commons.or g/gr oups/openstax-intr oduction-to-p ython-pr ogramming/14678/?__hub_id=27) .\nTechnology partners\nAs allies in making high-quality learning materials accessible, our technology partners offer optional lo w-cost\ntools that ar e integr ated with OpenStax books. T o access the technology options for your te xt, visit your book\npage on OpenStax.or g.6Preface\nAccess for fr ee at openstax.or gFigur e1.1credit: Larissa Chu, C C BY 4.0\nChapter Outline\n1.1Backgr ound", "page on OpenStax.or g.6Preface\nAccess for fr ee at openstax.or gFigur e1.1credit: Larissa Chu, C C BY 4.0\nChapter Outline\n1.1Backgr ound\n1.2Input/output\n1.3Variables\n1.4String basics\n1.5Number basics\n1.6Error messages\n1.7Comments\n1.8Why Python?\n1.9Chapter summary\nIntroduction\nComputers and pr ograms ar e everywher e in today 's world. Pr ograms affect many aspects of daily life and\nsociety as a whole. People depend on pr ograms for communication, shopping, entertainment, health car e, and\ncountless other needs. Learning ho w to pr ogram computers opens the door to many car eers and\nopportunities for building a better world.\nPrograms consist of statements to be run one after the other . Astatement describes some action to be\ncarried out.", "opportunities for building a better world.\nPrograms consist of statements to be run one after the other . Astatement describes some action to be\ncarried out.\nThe statement print(\"Good morning\" )instructs Python to output the message \"Good morning\" to the\nuser. The statement count = 0instructs Python to assign the integer 0to the variable count.\nThis chapter intr oduces statements for input and output, assigning variables, and basic arithmetic. Making\nmistakes is a normal part of pr ogramming, and the chapter includes advice on understanding err or messages.\nThe chapter ends with a short history of Python and discusses why Python has become so popular today .\nStatements1\n1.1 Back ground\nLearning Objectives\nBy the end of this section you should be able to", "The chapter ends with a short history of Python and discusses why Python has become so popular today .\nStatements1\n1.1 Back ground\nLearning Objectives\nBy the end of this section you should be able to\n\u2022Name two e xamples of computer pr ograms in e veryday life.\n\u2022Explain why Python is a good pr ogramming language to learn.\nComputer pr ograms\nAcomputer is an electr onic de vice that stor es and pr ocesses information. Examples of computers include\nsmartphones, tablets, laptops, desktops, and servers. T echnically , aprogramis a sequence of instructions that\na computer can run. Pr ograms help people accomplish e veryday tasks, cr eate ne w technology , and have fun.\nThe goal of this book is to teach intr oductory pr ogramming and pr oblem solving. W riting pr ograms is a", "The goal of this book is to teach intr oductory pr ogramming and pr oblem solving. W riting pr ograms is a\ncreative activity , inher ently useful, and r ewarding! No prior backgr ound in computer science is necessary to\nread this book. Many differ ent types of pr ograms e xist, as sho wn in the illustr ation belo w. This book will focus\non gener al purpose pr ograms that typically run \"behind the scenes.\"\nCHECKPOIN T\nOnline music str eaming\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-1-backgr ound)\nCONCEPT S IN PRA CTICE\nComputers and pr ograms\n1.How many types of pr ograms wer e described in the animation?\na.3\nb.4\nc.5\n2.What type of pr ogram will this book e xplain ho w to write?", "CONCEPT S IN PRA CTICE\nComputers and pr ograms\n1.How many types of pr ograms wer e described in the animation?\na.3\nb.4\nc.5\n2.What type of pr ogram will this book e xplain ho w to write?\na.a tool that summarizes an individual' s music pr eferences\nb.a mobile app for managing and sharing playlists of songs\nc.a website that sho ws the top artists for the past five years\n3.Which of the follo wing de vices is an e xample of a computer?\na.wired headphones that plug into a smartphone\nb.remote contr ol that pauses or skips the curr ent song\nc.wi-fi speaker that str eams music fr om Amazon\n4.Reading this book r equir es a str ong backgr ound in mathematics.\na.true\nb.false81 \u2022 Statements\nAccess for fr ee at openstax.or gEXPL ORING FUR THER", "c.wi-fi speaker that str eams music fr om Amazon\n4.Reading this book r equir es a str ong backgr ound in mathematics.\na.true\nb.false81 \u2022 Statements\nAccess for fr ee at openstax.or gEXPL ORING FUR THER\nLater chapters of this book sho w ho w to write analysis pr ograms using r eal data. Example libr aries that\nprovide access to online str eaming services include Spotip y(https://openstax.or g/r/100spotip y),Pytube\n(https://openstax.or g/r/100p ytube) , and Pydor a(https://openstax.or g/r/100p ydor a). Python-r elated tools\noften have the letters \" py\" in their name.\nThe Python language\nThis book intr oduces Python (https://openstax.or g/r/100p ython) , one of the top pr ogramming languages", "often have the letters \" py\" in their name.\nThe Python language\nThis book intr oduces Python (https://openstax.or g/r/100p ython) , one of the top pr ogramming languages\ntoday . Leading tech giants like Google, Apple, NASA, Instagr am, Pixar , and others use Python e xtensively .\nOne r eason why Python is popular is because many libr aries e xist for doing r eal work. A libraryis a collection\nof code that can be used in other pr ograms. Python comes with an e xtensive Standar d Libr ary\n(https://openstax.or g/r/100p ythlibr ary) for solving e veryday computing pr oblems like e xtracting data fr om files\nand cr eating summary r eports. In addition, the community de velops many other libr aries for Python. Ex:", "and cr eating summary r eports. In addition, the community de velops many other libr aries for Python. Ex:\nPandas (https://openstax.or g/r/100pandas) is a widely used libr ary for data analysis.\nAnother r eason why Python is popular is because the syntax is concise and str aightforwar d. The syntax of a\nlanguage defines ho w code must be structur ed. Syntax rules define the ke ywor ds, symbols, and formatting\nused in pr ograms. Compar ed to other pr ogramming languages, Python is mor e concise and str aightforwar d.\nEXAMPLE 1.1\nHello world in P ython and Ja va\nBy tr adition, Hello W orld (https://openstax.or g/r/100hello world) is the first pr ogram to write when learning\na ne w language. This pr ogram simply displays the message \"Hello, World!\" to the user . The hello world", "a ne w language. This pr ogram simply displays the message \"Hello, World!\" to the user . The hello world\nprogram is only one line in Python:\nprint(\"Hello, World!\" )\nIn contr ast, the hello world pr ogram is five lines in Java (a differ ent language).\npublic class Hello {\npublic static void main(String[] args) {\nSystem.out.println(\"Hello, World!\");\n}\n}\nHowever, conciseness is not the only consider ation for which language is used. In differ ent situations\ndiffer ent languages may be mor e appr opriate. Ex: Java is often used in Andr oid de velopment.\nCHECKPOIN T\nCounting lines in a file\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-1-backgr ound)1.1 \u2022 Backgr ound 9CONCEPT S IN PRA CTICE\nPython vs Ja va syntax", "Access multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-1-backgr ound)1.1 \u2022 Backgr ound 9CONCEPT S IN PRA CTICE\nPython vs Ja va syntax\n5.In gener al, Python pr ograms ar e _____ than Java pr ograms.\na.faster\nb.longer\nc.shorter\n6.In the e xample pr ograms abo ve, what syntax r equir ed b y Java is not r equir ed b y Python?\na.semicolons\nb.parentheses\nc.quote marks\nTRY IT\nFavorite song\nThe pr ogram belo w asks for your name and displays a friendly gr eeting. Run the pr ogram and see what\nhappens. In the err or message, EOF stands for End of File.\n\u2022Many of the pr ograms in this chapter e xpect input fr om the user . Enter your name in the Input bo x\nbelo w the code. Run the pr ogram again, and see what changes.", "\u2022Many of the pr ograms in this chapter e xpect input fr om the user . Enter your name in the Input bo x\nbelo w the code. Run the pr ogram again, and see what changes.\n\u2022Copy the follo wing lines to the end of the pr ogram: print(\"What is your favorite song?\" )\nsong =input() print( \"Cool! I like\" , song, \"too.\")\n\u2022The modified pr ogram r eads two lines of input: nameand song. Add your favorite song to the Input\nbox belo w your name, and run the pr ogram again.\nThe ne xt section of the book will e xplain ho wprint()and input()work. Feel fr ee to e xperiment with this\ncode until you ar e ready to mo ve on.\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-1-backgr ound)\n1.2 Input/output\nLearning objectives", "code until you ar e ready to mo ve on.\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-1-backgr ound)\n1.2 Input/output\nLearning objectives\nBy the end of this section you should be able to\n\u2022Display output using the print()function.\n\u2022Obtain user input using the input()function.\nBasic output\nThe print()function displays output to the user .Output is the information or r esult pr oduced b y a pr ogram.\nThe sepand endoptions can be used to customize the output. Table 1.1 shows e xamples of sepand end.\nMultiple values, separ ated b y commas, can be printed in the same statement. By default, each value is\nsepar ated b y a space char acter in the output. The sepoption can be used to change this behavior .", "separ ated b y a space char acter in the output. The sepoption can be used to change this behavior .\nBy default, the print()function adds a ne wline char acter at the end of the output. A newline char acter tells10 1 \u2022 Statements\nAccess for fr ee at openstax.or gthe display to mo ve to the ne xt line. The endoption can be used to continue printing on the same line.\nCode Output\nprint(\"Today is Monday.\" )\nprint(\"I like string beans.\" )TodayisMonday.\nI like string beans.\nprint(\"Today\",\"is\",\"Monday\" )\nprint(\"Today\",\"is\",\"Monday\" , sep=\"...\")TodayisMonday\nToday... is...Monday\nprint(\"Today is Monday, \" , end=\"\")\nprint(\"I like string beans.\" )TodayisMonday, I like string\nbeans.\nprint(\"Today\",\"is\",\"Monday\" , sep=\"? \",\nend=\"!!\")\nprint(\"I like string beans.\" )Today? is? Monday!!I like string\nbeans.", "print(\"I like string beans.\" )TodayisMonday, I like string\nbeans.\nprint(\"Today\",\"is\",\"Monday\" , sep=\"? \",\nend=\"!!\")\nprint(\"I like string beans.\" )Today? is? Monday!!I like string\nbeans.\nTable 1.1Example uses of print().\nCHECKPOIN T\nDispla ying output t o the user\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-2-inputoutput)\nCONCEPT S IN PRA CTICE\nThe print() function\n1.Which line of code prints Hello world! as one line of output?\na.print(Hello world!)\nb.print(\"Hello\",\"world\",\"!\")\nc.print(\"Hello world!\" )\n2.Which lines of code prints Hello world! as one line of output?\na.print(\"Hello\")\nprint(\" world!\" )\nb.print(\"Hello\")\nprint(\" world!\" , end=\"\")\nc.print(\"Hello\", end=\"\")\nprint(\" world!\" )", "2.Which lines of code prints Hello world! as one line of output?\na.print(\"Hello\")\nprint(\" world!\" )\nb.print(\"Hello\")\nprint(\" world!\" , end=\"\")\nc.print(\"Hello\", end=\"\")\nprint(\" world!\" )\n3.What output is pr oduced b y the follo wing statement?\nprint(\"555\",\"0123\", sep=\"-\")1.2 \u2022 Input/output 11a.5550123\nb.5550123-\nc.555-0123\nDO SP ACES REALL Y MATTER?\nSpaces and ne wline char acters ar e not inher ently important. Ho wever, learning to be pr ecise is an essential\nskill for pr ogramming. Noticing little details, like ho w wor ds ar e separ ated and ho w lines end, helps ne w\nprogrammers become better .\nBasic input\nComputer pr ograms often r eceive input fr om the user .Input is what a user enters into a pr ogram. An input\nstatement, variable = input(\"prompt\" ), has thr ee parts:", "Basic input\nComputer pr ograms often r eceive input fr om the user .Input is what a user enters into a pr ogram. An input\nstatement, variable = input(\"prompt\" ), has thr ee parts:\n1.Avariable refers to a value stor ed in memory . In the statement abo ve,variable can be r eplaced with any\nname the pr ogrammer chooses.\n2.The input() function r eads one line of input fr om the user . A function is a named, r eusable block of code\nthat performs a task when called. The input is stor ed in the computer 's memory and can be accessed later\nusing the variable.\n3.Aprompt is a short message that indicates the pr ogram is waiting for input. In the statement abo ve,\n\"prompt \"can be omitted or r eplaced with any message.\nCHECKPOIN T\nObtaining input fr om the user", "\"prompt \"can be omitted or r eplaced with any message.\nCHECKPOIN T\nObtaining input fr om the user\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-2-inputoutput)\nCONCEPT S IN PRA CTICE\nThe input() function\n4.Which line of code corr ectly obtains and stor es user input?\na.input()\nb.today_is = input\nc.today_is = input()\n5.Someone named Sophia enters their name when pr ompted with\nprint(\"Please enter your name: \" )\nname =input()\nWhat is displayed b yprint(\"You entered:\" , name)?\na.You entered: name\nb.You entered: Sophia12 1 \u2022 Statements\nAccess for fr ee at openstax.or gc.You entered:, Sophia\n6.What is the output if the user enters \" six\" as the input?\nprint(\"Please enter a number: \" )\nnumber = input()\nprint(\"Value =\" , number)\na.Value = six", "6.What is the output if the user enters \" six\" as the input?\nprint(\"Please enter a number: \" )\nnumber = input()\nprint(\"Value =\" , number)\na.Value = six\nb.Value = 6\nc.Value = number\nTRY IT\nFrost poem\nWrite a pr ogram that uses multiple print()statements to output the follo wing poem b yRobert Fr ost\n(https://openstax.or g/r/100r obertfr ost). Each print()statement should corr espond to one line of output.\nTip: You don 't need to write the entir e program all at once. T ry writing the first print()statement, and\nthen click the Run button. Then write the ne xtprint()statement, and click the Run button again.\nContinue writing and testing the code incr ementally until you finish the pr ogram.\nI shall be telling this witha sigh\nSomewhere ages andages hence:\nTwo roads diverged ina wood, andI--", "Continue writing and testing the code incr ementally until you finish the pr ogram.\nI shall be telling this witha sigh\nSomewhere ages andages hence:\nTwo roads diverged ina wood, andI--\nI took the one less traveled by,\nAnd that has made allthe difference.\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-2-inputoutput)\nTRY IT\nName and lik es\nWrite a pr ogram that asks the follo wing two questions (e xample input in bold):\nShakira\nWhat do you like? singing\nWhat is your name? Shakira\nWhat do you like? singing\nOutput a blank line after r eading the input. Then output the follo wing message based on the input:1.2 \u2022 Input/output 13Shakira likessinging\nShakira likes singing", "What do you like? singing\nOutput a blank line after r eading the input. Then output the follo wing message based on the input:1.2 \u2022 Input/output 13Shakira likessinging\nShakira likes singing\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-2-inputoutput)\n1.3 Variables\nLearning objectives\nBy the end of this section you should be able to\n\u2022Assign variables and print variables.\n\u2022Explain rules for naming variables.\nAssignment statement\nVariables allo w pr ograms to r efer to values using names r ather than memory locations. Ex: agerefers to a\nperson 's age, and birthrefers to a person 's date of birth.\nA statement can set a variable to a value using the assignment oper ator (=). Note that this is differ ent fr om", "person 's age, and birthrefers to a person 's date of birth.\nA statement can set a variable to a value using the assignment oper ator (=). Note that this is differ ent fr om\nthe equal sign of mathematics. Ex: age =6orbirth = \"May 15\" . The left side of the assignment statement\nis a variable, and the right side is the value the variable is assigned.\nCHECKPOIN T\nAssigning and using v ariables\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-3-variables)\nCONCEPT S IN PRA CTICE\nAssigning and using v ariables\n1.Which line of code corr ectly r etrie ves the value of the variable, city, after the follo wing assignment?\ncity =\"Chicago\"\na.print(\"In which city do you live?\" )\nb.city =\"London\"\nc.print(\"The city where you live is\" , city)", "city =\"Chicago\"\na.print(\"In which city do you live?\" )\nb.city =\"London\"\nc.print(\"The city where you live is\" , city)\n2.Which pr ogram stor es and r etrie ves a variable corr ectly ?\na.print(\"Total =\" , total)\ntotal = 6\nb.total = 6\nprint(\"Total =\" , total)\nc.print(\"Total =\" , total)14 1 \u2022 Statements\nAccess for fr ee at openstax.or gtotal = input()\n3.Which is the assignment oper ator?\na.:\nb.==\nc.=\n4.Which is a valid assignment?\na.temperature = 98.5\nb.98.5= temperature\nc.temperature - 23.2\nVariable naming rules\nA variable name can consist of letters, digits, and underscor es and be of any length. The name cannot start\nwith a digit. Ex: 101class is invalid. Also, letter case matters. Ex: Totalis differ ent fr omtotal. Python 's style", "with a digit. Ex: 101class is invalid. Also, letter case matters. Ex: Totalis differ ent fr omtotal. Python 's style\nguide r ecommends writing variable names in snake case , which is all lo wercase with underscor es in between\neach wor d, such as first_name ortotal_price .\nA name should be short and descriptive, so wor ds ar e preferr ed o ver single char acters in pr ograms for\nreadability . Ex: A variable named countindicates the variable 's purpose better than a variable named c.\nPython has r eserved wor ds, kno wn as keywor ds, which have special functions and cannot be used as names\nfor variables (or other objects).\nFalse await else import pass\nNone break except in raise\nTrue class finally is return\nand continue for lambda try\nas def from nonlocal while\nassert del global not with", "for variables (or other objects).\nFalse await else import pass\nNone break except in raise\nTrue class finally is return\nand continue for lambda try\nas def from nonlocal while\nassert del global not with\nasynch elif if or yield\nTable 1.2Keywor ds\nCONCEPT S IN PRA CTICE\nValid v ariable names\n5.Which can be used as a variable name?\na.median\nb.class1.3 \u2022 V ariables 15c.import\n6.Why is the name, 2nd_input , not a valid variable name?\na.contains an underscor e\nb.starts with a digit\nc.is a ke ywor d\n7.Which would be a good name for a variable storing a zip code?\na.z\nb.var_2\nc.zip_code\n8.Given the variable name, DogBreed , which impr ovement conforms to Python 's style guide?\na.dog_breed\nb.dogBreed\nc.dog-breed\nTRY IT\nFinal scor e\nWrite a Python computer pr ogram that:", "c.zip_code\n8.Given the variable name, DogBreed , which impr ovement conforms to Python 's style guide?\na.dog_breed\nb.dogBreed\nc.dog-breed\nTRY IT\nFinal scor e\nWrite a Python computer pr ogram that:\n\u2022Creates a variable, team1, assigned with the value \"Liverpool\" .\n\u2022Creates a variable, team2, assigned with the value \"Chelsea\" .\n\u2022Creates a variable score1, assigned with the value 4.\n\u2022Creates a variable, score2, assigned with the value 3.\n\u2022Prints team1,\"versus\" , and team2as a single line of output.\n\u2022Prints \"Final score: \" ,score1,\"to\",score2as a single line of output.\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-3-variables)\n1.4 String basics\nLearning objectives\nBy the end of this section you should be able to", "Access multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-3-variables)\n1.4 String basics\nLearning objectives\nBy the end of this section you should be able to\n\u2022Use the built-in len()function to get a string' s length.\n\u2022Concatenate string liter als and variables using the + oper ator.\nQuote marks\nA string is a sequence of char acters enclosed b y matching single (') or double (\") quotes. Ex: \"Happy\nbirthday!\" and '21'are both strings.\nTo include a single quote (') in a string, enclose the string with matching double quotes (\"). Ex: \"Won't this\nwork?\"To include a double quote (\"), enclose the string with matching single quotes ('). Ex: 'They said \"Try\nit!\", so I did' .16 1 \u2022 Statements\nAccess for fr ee at openstax.or gValid string Invalid string", "it!\", so I did' .16 1 \u2022 Statements\nAccess for fr ee at openstax.or gValid string Invalid string\n\"17\"or'17' 17\n\"seventeen\" or'seventeen' seventeen\n\"Where?\" or'Where?' \"Where?'\n\"I hope you aren't sad.\" 'I hope you aren' t sad.'\n'The teacher said \"Correct!\" ' \"The teacher said \" Correct! \" \"\nTable 1.3Rules for strings.\nCONCEPT S IN PRA CTICE\nValid and inv alid strings\n1.Which of the follo wing is a string?\na.Hello!\nb.29\nc.\"7 days\"\n2.Which line of code assigns a string to the variable email?\na.\"fred78@gmail.com\"\nb.\"email = fred78@gmail.com\"\nc.email = \"fred78@gmail.com\"\n3.Which is a valid string?\na.I know yo u'll answer correctly!\nb.'I know you' ll answer correctly! '\nc.\"I know you'll answer correctly!\"\n4.Which is a valid string?\na.You say \"Please\" to be polite", "3.Which is a valid string?\na.I know yo u'll answer correctly!\nb.'I know you' ll answer correctly! '\nc.\"I know you'll answer correctly!\"\n4.Which is a valid string?\na.You say \"Please\" to be polite\nb.\"You say \" Please\" to be polite\"\nc.'You say \"Please\" to be polite'\nlen() function\nA common oper ation on a string object is to get the string length, or the number of char acters in the string.\nThe len() function, when called on a string value, r eturns the string length.\nCHECKPOIN T\nUsing len() t o get the length of a string\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/1.4 \u2022 String basics 171-4-string-basics)\nCONCEPT S IN PRA CTICE\nApplying len() function t o string v alues\n5.What is the r eturn value for len(\"Hi Ali\" )?\na.2\nb.5\nc.6", "CONCEPT S IN PRA CTICE\nApplying len() function t o string v alues\n5.What is the r eturn value for len(\"Hi Ali\" )?\na.2\nb.5\nc.6\n6.What is the length of an empty string variable (\"\")?\na.undefined\nb.0\nc.2\n7.What is the output of the follo wing code?\nnumber = \"12\"\nnumber_of_digits = len(number)\nprint(\"Number\" , number, \"has\", number_of_digits, \"digits.\" )\na.Number12has12digits.\nb.Number12has2digits.\nc.Number12has number_of_digits digits.\nConcatenation\nConcatenation is an oper ation that combines two or mor e strings sequentially with the concatenation oper ator\n(+). Ex: \"A\"+\"part\"produces the string \"Apart\".\nCHECKPOIN T\nConcatenating multiple strings\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-4-string-basics)\nCONCEPT S IN PRA CTICE", "CHECKPOIN T\nConcatenating multiple strings\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-4-string-basics)\nCONCEPT S IN PRA CTICE\nString concatenation\n8.Which pr oduces the string \"10\"?\na.1+0\nb.\"1 + 0\"\nc.\"1\"+\"0\"\n9.Which pr oduces the string \"Awake\"?18 1 \u2022 Statements\nAccess for fr ee at openstax.or ga.\"wake\"+\"A\"\nb.\"A + wake\"\nc.\"A\"+\"wake\"\n10.A user enters \"red\"after the follo wing line of code.\ncolor = input(\"What is your favorite color?\" )\nWhich pr oduces the output \"Your favorite color is red!\" ?\na.print(\"Your favorite color is \" + color + !)\nb.print(\"Your favorite color is \" +\"color\" +\"!\")\nc.print(\"Your favorite color is \" + color + \"!\")\n11.Which of the follo wing assigns \"one-sided\" to the variable holiday?\na.holiday = \"one\"+\"sided\"", "b.print(\"Your favorite color is \" +\"color\" +\"!\")\nc.print(\"Your favorite color is \" + color + \"!\")\n11.Which of the follo wing assigns \"one-sided\" to the variable holiday?\na.holiday = \"one\"+\"sided\"\nb.holiday = one-sided\nc.holiday = \"one-\"+\"sided\"\nTRY IT\nName length\nWrite a pr ogram that asks the user to input their first and last name separ ately . Use the follo wing pr ompts\n(example input in bold):\nWhat is your first name? Alan\nWhat is your last name? Turing\nThe pr ogram should then output the length of each name. Based on the e xample input abo ve, the output\nwould be:\nYour first name is4letters long\nYour last name is6letters long\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-4-string-basics)\nTRY IT\nPunctuation", "Your first name is4letters long\nYour last name is6letters long\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-4-string-basics)\nTRY IT\nPunctuation\nWrite a Python computer pr ogram that:\n\u2022Assigns the string \"Freda\"to a variable, name.1.4 \u2022 String basics 19\u2022Assigns the string \"happy\"to a variable, feel.\n\u2022Prints the string \"Hi Freda!\" with a single print()function using the variable name.\n\u2022Prints the string \"I'm glad you feel happy.\" with a single print()function using the variable\nfeel.\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-4-string-basics)\n1.5 Number basics\nLearning objectives\nBy the end of this section you should be able to\n\u2022Use arithmetic oper ators to perform calculations.", "1-4-string-basics)\n1.5 Number basics\nLearning objectives\nBy the end of this section you should be able to\n\u2022Use arithmetic oper ators to perform calculations.\n\u2022Explain the pr ecedence of arithmetic oper ators.\nNumeric data types\nPython supports two basic number formats, integer and floating-point. An integer r epresents a whole number ,\nand a floating-point format r epresents a decimal number . The format a language uses to r epresent data is\ncalled a data type . In addition to integer and floating-point types, pr ogramming languages typically have a\nstring type for r epresenting te xt.\nCHECKPOIN T\nInteger and floating-point\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-5-number-basics)\nCONCEPT S IN PRA CTICE\nIntegers, floats, and strings", "Integer and floating-point\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-5-number-basics)\nCONCEPT S IN PRA CTICE\nIntegers, floats, and strings\nAssume that x =1,y =2.0, and s =\"32\".\n1.What is the output of the follo wing code?\nprint(x, type(x))\na.1'int'.\nb.1.0<class'float'>.\nc.1<class'int'>.\n2.What is the output of the follo wing code?\nprint(y, type(y))\na.2.0<class'int'>\nb.2.0<class'float'>\nc.2<class'int'>20 1 \u2022 Statements\nAccess for fr ee at openstax.or g3.What is the type of the follo wing value?\n\"12.0\"\na.string\nb.int\nc.float\nBasic arithmetic\nArithmetic oper ators are used to perform mathematical oper ations like addition, subtr action, multiplication,\nand division.\nFour basic arithmetic oper ators e xist in Python:\n1.Addition (+)", "Arithmetic oper ators are used to perform mathematical oper ations like addition, subtr action, multiplication,\nand division.\nFour basic arithmetic oper ators e xist in Python:\n1.Addition (+)\n2.Subtr action (-)\n3.Multiplication (*)\n4.Division (/)\nCHECKPOIN T\nExamples of arithmetic oper ators\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-5-number-basics)\nCONCEPT S IN PRA CTICE\nApplying arithmetic oper ators\nAssume that x =7,y =20, and z =2.\n4.Given the follo wing lines of code, what is the output of the code?\nc =0\nc = x - z\nc = c + 1\nprint(c)\na.1\nb.5\nc.6\n5.What is the value of a?\na =3.5-1.5\na.2\nb.2.01.5 \u2022 Number basics 21c.2.5\n6.What is the output of print(x / z) ?\na.3\nb.3.0\nc.3.5\n7.What is the output of print(y / z) ?\na.0\nb.10\nc.10.0", "a.1\nb.5\nc.6\n5.What is the value of a?\na =3.5-1.5\na.2\nb.2.01.5 \u2022 Number basics 21c.2.5\n6.What is the output of print(x / z) ?\na.3\nb.3.0\nc.3.5\n7.What is the output of print(y / z) ?\na.0\nb.10\nc.10.0\n8.What is the output of print(z * 1.5)?\na.2\nb.3\nc.3.0\nOper ator pr ecedence\nWhen a calculation has multiple oper ators, each oper ator is e valuated in or der of precedence . Ex: 1+2*3\nis7because multiplication takes pr ecedence o ver addition. Ho wever,(1+2) *3is9because par entheses\ntake pr ecedence o ver multiplication.\nOper ator Description Example Result\n()Parentheses(1+2) *39\n**Exponentiation2**4 16\n+,-Positive, negative-math.pi -3.14159\n*,/Multiplication, division2*3 6\n+,-Addition, subtr action1+2 3\nTable 1.4Oper ator pr ecedence fr om highest to lo west.\nCHECKPOIN T", "**Exponentiation2**4 16\n+,-Positive, negative-math.pi -3.14159\n*,/Multiplication, division2*3 6\n+,-Addition, subtr action1+2 3\nTable 1.4Oper ator pr ecedence fr om highest to lo west.\nCHECKPOIN T\nOrder of oper ations in an arithmetic expr ession\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-5-number-basics)22 1 \u2022 Statements\nAccess for fr ee at openstax.or gCONCEPT S IN PRA CTICE\nMultiple arithmetic oper ators\n9.What is the value of 4*3**2+1?\na.37\nb.40\nc.145\n10.Which part of (1+3) **2/4evaluates first?\na.4**2\nb.1+3\nc.2/4\n11.What is the value of -4**2?\na.-16\nb.16\n12.How many oper ators ar e in the follo wing statement?\nresult = - 2**3\na.1\nb.2\nc.3\nTRY IT\nValues and types\nWrite a Python computer pr ogram that:", "c.2/4\n11.What is the value of -4**2?\na.-16\nb.16\n12.How many oper ators ar e in the follo wing statement?\nresult = - 2**3\na.1\nb.2\nc.3\nTRY IT\nValues and types\nWrite a Python computer pr ogram that:\n1.Defines an integer variable named 'int_a'and assigns 'int_a'with the value 10.\n2.Defines a floating-point variable named 'float_a' and assigns 'float_a' with the value 10.0.\n3.Defines a string variable named 'string_a' and assigns 'string_a' with the string value \"10\".\n4.Prints the value of each of the thr ee variables along with their type.\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-5-number-basics)\nTRY IT\nMeters t o feet\nWrite a Python computer pr ogram that:\n1.Assigns the integer value 10to a variable, meters.", "1-5-number-basics)\nTRY IT\nMeters t o feet\nWrite a Python computer pr ogram that:\n1.Assigns the integer value 10to a variable, meters.\n2.Assigns the floating-point value 3.28to a variable, meter2feet .\n3.Calculates 10 meters in feet b y multiplying meterbymeter2feet . Stor e the r esult in a variable, feet.1.5 \u2022 Number basics 234.Prints the content of variable feetin the output.\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-5-number-basics)\n1.6 Error messages\nLearning objectives\nBy the end of this section you should be able to\n\u2022Identify the err or type and line number in err or messages.\n\u2022Corr ect syntax err ors, name err ors, and indentation err ors.\nHow to r ead err ors", "By the end of this section you should be able to\n\u2022Identify the err or type and line number in err or messages.\n\u2022Corr ect syntax err ors, name err ors, and indentation err ors.\nHow to r ead err ors\nA natur al part of pr ogramming is making mistakes. Even e xperienced pr ogrammers make mistakes when\nwriting code. Err ors may r esult when mistakes ar e made when writing code. The computer r equir es very\nspecific instructions telling the computer what to do. If the instructions ar e not clear , then the computer does\nnot kno w what to do and gives back an err or.\nWhen an err or occurs, Python displays a message with the follo wing information:\n1.The line number of the err or.\n2.The type of err or (Ex: SyntaxError ).\n3.Additional details about the err or.", "When an err or occurs, Python displays a message with the follo wing information:\n1.The line number of the err or.\n2.The type of err or (Ex: SyntaxError ).\n3.Additional details about the err or.\nEx: T yping print\"Hello!\" without par entheses is a syntax err or. In Python, par entheses ar e requir ed to use\nprint. When attempting to run print\"Hello!\" , Python displays the follo wing err or:\nTraceback (most recent call last):\nFile \"/home/student/Desktop/example.py\", line 1\nprint \"Hello\"\n^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(\"Hello\")?\nThe car et char acter ( ^) sho ws wher e Python found the err or. Sometimes the err or may be located one or two\nlines befor e wher e the car et symbol is sho wn because Python may not have disco vered the err or until then.", "lines befor e wher e the car et symbol is sho wn because Python may not have disco vered the err or until then.\nTraceback is a Python r eport of the location and type of err or. The wor d traceback suggests a pr ogrammer\ntrace back in the code to find the err or if the err or is not seen right away .\nLearning to r ead err or messages car efully is an important skill. The amount of technical jar gon can be\noverwhelming at first. But this information can be very helpful.\nCHECKPOIN T\nIncorr ect v ariable name\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-6-err or-messages)24 1 \u2022 Statements\nAccess for fr ee at openstax.or gCONCEPT S IN PRA CTICE\nParts of an err or\nGiven the follo wing err or message:\nTraceback (most recent call last):", "1-6-err or-messages)24 1 \u2022 Statements\nAccess for fr ee at openstax.or gCONCEPT S IN PRA CTICE\nParts of an err or\nGiven the follo wing err or message:\nTraceback (most recent call last):\nFile \"/home/student/Desktop/example.py\", line 2\nprint \"test\"\n^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(\"test\")?\n1.What is the filename of the pr ogram?\na.Desktop\nb.example.p y\nc.test\n2.On which line was the err or found?\na.1\nb.2\nc.3\n3.What type of err or was found?\na.missing par entheses\nb.SyntaxError\nc.traceback\nCommon types of err ors\nDiffer ent types of err ors may occur when running Python pr ograms. When an err or occurs, kno wing the type\nof err or gives insight about ho w to corr ect the err or. The follo wing table sho ws e xamples of mistakes that", "of err or gives insight about ho w to corr ect the err or. The follo wing table sho ws e xamples of mistakes that\nanyone could make when pr ogramming.\nMistake Error message Explanation\nprint(\"Have a nice\nday!\"SyntaxError:\nunexpected EOF\nwhileparsingThe closing par enthesis is missing. Python is\nsurprised to r each the end of file (EOF ) befor e this\nline is complete.\nword =input(\"Type a\nword: )SyntaxError: EOL\nwhilescanning\nstring literalThe closing quote marks ar e missing. As a r esult,\nthe string does not terminate befor e the end of\nline (EOL).\nprint(\"You typed:\",\nwird)NameError: name\n'wird'isnot\ndefinedThe spelling of wordis incorr ect. The\nprogrammer accidentally typed the wr ong ke y.\nTable 1.5Simple mistakes.1.6 \u2022 Err or messages 25Mistake Error message Explanation", "'wird'isnot\ndefinedThe spelling of wordis incorr ect. The\nprogrammer accidentally typed the wr ong ke y.\nTable 1.5Simple mistakes.1.6 \u2022 Err or messages 25Mistake Error message Explanation\nprints(\"You typed:\",\nword)NameError: name\n'prints' isnot\ndefinedThe spelling of printis incorr ect. The\nprogrammer accidentally typed an e xtra letter .\nprint(\"Hello\")IndentationError:\nunexpected indentThe pr ogrammer accidentally typed a space at\nthe start of the line.\nprint(\"Goodbye\" )IndentationError:\nunexpected indentThe pr ogrammer accidentally pr essed the T ab ke y\nat the start of the line.\nTable 1.5Simple mistakes.\nCONCEPT S IN PRA CTICE\nTypes of err ors\nFor each pr ogram belo w, what type of err or will occur?\n4.print(\"Breakfast options:\" )\nprint(\"A. Cereal\" )\nprint(\"B. Eggs\" )", "Table 1.5Simple mistakes.\nCONCEPT S IN PRA CTICE\nTypes of err ors\nFor each pr ogram belo w, what type of err or will occur?\n4.print(\"Breakfast options:\" )\nprint(\"A. Cereal\" )\nprint(\"B. Eggs\" )\nprint(\"C. Yogurt\" )\nchoice = input(\"What would you like? \" )\na.IndentationError\nb.NameError\nc.SyntaxError\n5.birth = input(\"Enter your birth date: )\nprint(\"Happy birthday on \", birth)\na.IndentationError\nb.NameError\nc.SyntaxError\n6.print(\"Breakfast options:\" )\nprint(\" A. Cereal\" )\nprint(\" B. Eggs\" )\nprint(\" C. Yogurt\" )\nchoice = intput( \"What would you like? \" )\na.IndentationError26 1 \u2022 Statements\nAccess for fr ee at openstax.or gb.NameError\nc.SyntaxError\nTRY IT\nThree err ors\nThe follo wing pr ogram has thr ee err ors.", "a.IndentationError26 1 \u2022 Statements\nAccess for fr ee at openstax.or gb.NameError\nc.SyntaxError\nTRY IT\nThree err ors\nThe follo wing pr ogram has thr ee err ors.\n\u2022Run the pr ogram to find the first err or, and corr ect the corr esponding line of code.\n\u2022Then run the pr ogram again to find and corr ect the second err or.\n\u2022Keep running and corr ecting the pr ogram until no err ors ar e found.\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-6-err or-messages)\nTRY IT\nWrong symbols\nThis code is based on an earlier e xample, but the code contains se veral mistakes.\n\u2022One line is missing r equir ed punctuation, and another line uses incorr ect symbols.\n\u2022Run the pr ogram to find the first err or, and corr ect the corr esponding line of code.", "\u2022One line is missing r equir ed punctuation, and another line uses incorr ect symbols.\n\u2022Run the pr ogram to find the first err or, and corr ect the corr esponding line of code.\n\u2022Keep running and corr ecting the pr ogram until no err ors ar e found.\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-6-err or-messages)\n1.7 Comments\nLearning objectives\nBy the end of this section you should be able to\n\u2022Write concise, meaningful comments that e xplain intended functionality of the code.\n\u2022Write a docstring (mor e verbose comment) that describes the pr ogram functionality .\nThe hash char acter\nComments are short phr ases that e xplain what the code is doing. Ex: Lines 1, 8, and 10 in the follo wing", "The hash char acter\nComments are short phr ases that e xplain what the code is doing. Ex: Lines 1, 8, and 10 in the follo wing\nprogram contain comments. Each comment begins with a hash char acter ( #). All te xt from the hash char acter\nto the end of the line is ignor ed when running the pr ogram. In contr ast, hash char acters inside of strings ar e\ntreated as r egular te xt. Ex: The string \"Item #1: \" does not contain a comment.\nWhen writing comments:\n\u2022The #char acter should be follo wed b y a single space. Ex: # End of menu is easier to r ead than #End of\nmenu.\n\u2022Comments should e xplain the purpose of the code, not just r epeat the code itself . Ex: # Get the user's\npreferences is mor e descriptive than # Input item1 and item2 .1.7 \u2022 Comments 27EXAMPLE 1.2\nProgram with thr ee comments", "preferences is mor e descriptive than # Input item1 and item2 .1.7 \u2022 Comments 27EXAMPLE 1.2\nProgram with thr ee comments\n1# Display the menu options\n2print(\"Lunch Menu\" )\n3print(\"----------\" )\n4print(\"Burrito\" )\n5print(\"Enchilada\" )\n6print(\"Taco\")\n7print(\"Salad\")\n8print() # End of menu\n9\n10# Get the user's preferences\n11item1 = input(\"Item #1: \" )\n12item2 = input(\"Item #2: \" )\nCONCEPT S IN PRA CTICE\nSimple comments\n1.The main purpose of writing comments is to _____ .\na.avoid writing syntax err ors\nb.explain what the code does\nc.make the code run faster\n2.Which symbol is used for comments in Python?\na.#\nb./*\nc.//\n3.Which comment is formatted corr ectly ?\na.0 spaces:\n#Get the user input\nb.1 space:\n# Get the user input\nc.2 spaces:\n#Get the user input\nCode quality", "a.#\nb./*\nc.//\n3.Which comment is formatted corr ectly ?\na.0 spaces:\n#Get the user input\nb.1 space:\n# Get the user input\nc.2 spaces:\n#Get the user input\nCode quality\nThe e xample pr ogram abo ve had two parts: (1) display the menu options, and (2) get the user 's preferences.\nTogether , the blank lines and comments sho w the o verall structur e of the pr ogram.\nProgrammers spend mor e time r eading code than writing code. Ther efore, making code easier for others to\nread and understand is important. T wo ways to impr ove code quality include:\n\u2022Separ ate each part (lines that have a similar purpose) with a blank line.28 1 \u2022 Statements\nAccess for fr ee at openstax.or g\u2022Write a comment befor e each part. Not e very line needs a comment.\nCHECKPOIN T\nComments in a pr ogram", "Access for fr ee at openstax.or g\u2022Write a comment befor e each part. Not e very line needs a comment.\nCHECKPOIN T\nComments in a pr ogram\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-7-comments)\nCONCEPT S IN PRA CTICE\nCode quality\n4.Which comment is most useful for the follo wing code?\nprint(\"You said:\" , adj1 + \" \"+ noun1)\na.# Append adj1 and noun1\nb.# Print out a bunch of stuff\nc.# Show the resulting phrase\n5.Wher e should a blank line be inserted?\n1name =input(\"Whose birthday is today? \" )\n2print(\"Happy birthday to\" , name)\n3print(\"Everyone cheer for\" , name)\na.After line 1\nb.After line 2\nc.After line 3\n6.To tempor arily pr event a line fr om being run, one might . . .\na.introduce a syntax err or in the line.", "3print(\"Everyone cheer for\" , name)\na.After line 1\nb.After line 2\nc.After line 3\n6.To tempor arily pr event a line fr om being run, one might . . .\na.introduce a syntax err or in the line.\nb.remo ve the line fr om the pr ogram.\nc.insert a # at the beginning of the line.\nDocumentation\nPython pr ograms may optionally begin with a string kno wn as a docstring. A docstring is documentation\nwritten for others who will use the pr ogram but not necessarily r ead the sour ce code. Most of the official\ndocumentation at docs.p ython.or g(https://openstax.or g/r/100docstrings) is gener ated fr om docstrings.\nDocumentation can be long, so docstrings ar e gener ally written as multi-line strings (\"\"\"). Common\nelements of a docstring include a one-line summary , a blank line, and a longer description.", "Documentation can be long, so docstrings ar e gener ally written as multi-line strings (\"\"\"). Common\nelements of a docstring include a one-line summary , a blank line, and a longer description.\nCHECKPOIN T\nVacations docstring\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-7-comments)1.7 \u2022 Comments 29CONCEPT S IN PRA CTICE\nDocumentation\n7.The main purpose of writing docstrings is to . . .\na.summarize the pr ogram's purpose or usage.\nb.explain ho w each part of the code works.\nc.maintain a list of ideas for ne w featur es.\n8.Which of the follo wing is NO T a docstring?\na.\"\"\"Vacations Madlib.\"\"\"\nb.\"\"\"Vacations Madlib. This program asks the user for two adjectives and two\nnouns, which are then used to print a funny story about a vacation. \"\"\"", "a.\"\"\"Vacations Madlib.\"\"\"\nb.\"\"\"Vacations Madlib. This program asks the user for two adjectives and two\nnouns, which are then used to print a funny story about a vacation. \"\"\"\nc.# Vacations Madlib.\n#\n# This program asks the user for two adjectives\n# and two nouns, which are then used to print\n# a funny story about a vacation.\n9.Which docstring is most useful for this pr ogram?\na.\"\"\"Vacations Madlib.\"\"\"\nb.\"\"\"Vacations Madlib. This program asks the user for two adjectives and two\nnouns, which are then used to print a funny story about a vacation. \"\"\"\nc.\"\"\"Vacations Madlib. This program asks the user for two adjectives and two\nnouns, which are then used to print a funny story about a vacation. The code\nuses four variables to store the user input: two for the adjectives, and two", "nouns, which are then used to print a funny story about a vacation. The code\nuses four variables to store the user input: two for the adjectives, and two\nfor the nouns. The output is displayed on seven lines, beginning with a blank\nline after the input. \"\"\"\nTRY IT\nWhose bir thda y\nAdd two comments to the follo wing pr ogram: one for the input, and one for the output. Separ ate the input\nand output with a blank line. Then, compar e your comments with the sample solution, and ask yourself the\nfollo wing questions:\n\u2022Are your comments longer or shorter? Why ?\n\u2022Is the formatting of your comments corr ect?\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-7-comments)\nTRY IT\nGravity calculation", "\u2022Is the formatting of your comments corr ect?\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-7-comments)\nTRY IT\nGravity calculation\nWrite a docstring for the follo wing pr ogram. The first line of the docstring should e xplain, in one short30 1 \u2022 Statements\nAccess for fr ee at openstax.or gsentence, what the pr ogram is. The second line of the docstring should be blank. The thir d and subsequent\nlines should include a longer e xplanation of what the pr ogram does. At the end of the docstring, add a line\nthat says \"Author: \" follo wed b y your name.\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-7-comments)\n1.8 Why P ython?\nLearning objectives", "that says \"Author: \" follo wed b y your name.\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/\n1-7-comments)\n1.8 Why P ython?\nLearning objectives\nBy the end of this section you should be able to\n\u2022Name two historical facts about ho w Python was first cr eated.\n\u2022Describe two ways Python is consider ed a popular language.\nHistorical backgr ound\nPython has an inter esting history . In 1982, Guido van Rossum (https://openstax.or g/r/100vanRossum) , the\ncreator of Python, started working at CWI (https://openstax.or g/r/100CWI) , a Dutch national r esear ch institute.\nHe joined a team that was designing a ne w pr ogramming language, named ABC, for teaching and pr ototyping.", "He joined a team that was designing a ne w pr ogramming language, named ABC, for teaching and pr ototyping.\nABC' s simplicity was ideal for beginners, but the language lacked featur es requir ed to write advanced\nprograms.\nSeveral years later , van Rossum joined a differ ent team at CWI working on an oper ating system. The team\nneeded an easier way to write pr ograms for monitoring computers and analyzing data. Languages common in\nthe 1980' s wer e (and still ar e) difficult to use for these kinds of pr ograms. van Rossum envisioned a ne w\nlanguage that would have a simple syntax, like ABC, but also pr ovide advanced featur es that pr ofessionals\nwould need.\nAt first, van Rossum started working on this ne w language as a hobb y during his fr ee time. He named the", "would need.\nAt first, van Rossum started working on this ne w language as a hobb y during his fr ee time. He named the\nlanguage Python because he was a fan of the British comedy gr oup Monty Python (https://openstax.or g/r/\n100MontyPython) . Over the ne xt year , he and his colleagues successfully used Python many times for r eal\nwork. van Rossum e ventually decided to shar e Python with the br oader pr ogramming community online. He\nfreely shar ed Python 's entir e sour ce code so that anyone could write and run Python pr ograms.\nPython 's first r elease, kno wn as V ersion 0.9.0, appear ed in 1991, about six years after C++ and four years\nbefor e Java. van Rossum 's decisions to make the language simple yet advanced, suitable for e veryday tasks,", "befor e Java. van Rossum 's decisions to make the language simple yet advanced, suitable for e veryday tasks,\nand fr eely available online contributed to Python 's long-term success.\nCHECKPOIN T\nKey decisions\nAccess multimedia content (https://openstax.or g/books/intr oduction-p ython-pr ogramming/pages/1-8-why-\npython)\nCONCEPT S IN PRA CTICE\nPython hist ory\n1.The Python pr ogramming language was named after a _____.1.8 \u2022 Why Python? 31a.British comedy gr oup\nb.Dutch pr ogrammer\nc.non-venomous snake\n2.Which pr ogramming language came first?\na.Java\nb.Python\n3.Which sentence best describes the beginning of Python?\na.CWI hir ed Guido van Rossum to design a ne w pr ogramming language to compete with C++.", "a.Java\nb.Python\n3.Which sentence best describes the beginning of Python?\na.CWI hir ed Guido van Rossum to design a ne w pr ogramming language to compete with C++.\nb.Python started out as a hobb y and became open sour ce after se veral years of de velopment.\nc.van Rossum posted Python 's sour ce code online after working on the language for one year .\nEXPL ORING FUR THER\nFor mor e details about Python 's history , see \" A brief history of Python (https://openstax.or g/r/100history) \"\nby Vasilisa Sher omo va, and \" History and Philosophy of Python (https://openstax.or g/r/100sher omo va)\" by\nBernd Klein.\nPopularity of Python\nOver the years, Python has become a nonpr ofit or ganization with a thriving community . Millions of", "Bernd Klein.\nPopularity of Python\nOver the years, Python has become a nonpr ofit or ganization with a thriving community . Millions of\nprogrammers ar ound the world use Python for all kinds of inter esting pr ojects. Hundr eds of thousands of\nPython libr aries have been r eleased as open sour ce softwar e. The Python community is very active and\nsupportive online, answering questions and sharing code.\nOne way to see Python 's popularity is the TIOBE inde x(https://openstax.or g/r/100TIOBE) . TIOBE is a Dutch\ncompany that pr ovides pr oducts and services for measuring softwar e code quality . Since 2001, TIOBE has\ntracked the popularity of pr ogramming languages and posted the r esults online. Figur e 1.2 shows the TIOBE\ninde x over time for five of the most popular languages.", "tracked the popularity of pr ogramming languages and posted the r esults online. Figur e 1.2 shows the TIOBE\ninde x over time for five of the most popular languages.\nThe TIOBE inde x is based on the number of sear ch engine r esults for each language. The per centage r efers to\nhow many r esults belong to that language. Python has been among the top 10 languages e very year since\n2004. In October 2021, Python became the #1 language on the TIOBE inde x. No other language but C and Java\nhad been #1 for the pr evious 20 years.\nAnother way to see Python 's popularity is to analyze ho w frequently Python is discussed online. Stack Overflo w\n(https://openstax.or g/r/100o verflo w)is a question-and-answer website for pr ogrammers. Figur e 1.3 shows the", "(https://openstax.or g/r/100o verflo w)is a question-and-answer website for pr ogrammers. Figur e 1.3 shows the\nnumber of questions asked each month that wer e tagged with Python, JavaScript, and so forth. In r ecent\nyears, Python has become the most asked about language in pr ogramming forums.32 1 \u2022 Statements\nAccess for fr ee at openstax.or gFigur e1.2TIOBE pr ogramming community inde x. Sour ce:www .tiobe.com (https://www .tiobe.com/tiobe-inde x/)\nFigur e1.3Stack Overflo w questions per month . Sour ce:data.stacke xchange.com (https://data.stacke xchange.com/)\nCONCEPT S IN PRA CTICE\nPython popularity\n4.Accor ding to the TIOBE Inde x, which two languages wer e most popular fr om 2001 to 2021?1.8 \u2022 Why Python? 33a.C and C++\nb.Java and C\nc.Python and JavaScript", "Python popularity\n4.Accor ding to the TIOBE Inde x, which two languages wer e most popular fr om 2001 to 2021?1.8 \u2022 Why Python? 33a.C and C++\nb.Java and C\nc.Python and JavaScript\n5.In what year did Python become the most asked about language on Stack Overflo w?\na.2018\nb.2019\nc.2020\n6.How long has TIOBE been tr acking pr ogramming language popularity ?\na.since 1991\nb.since 2001\nc.since 2015\n1.9 Chapter summar y\nThis chapter intr oduced the basics of pr ogramming in Python, including:\n\u2022print()and input().\n\u2022Variables and assignment.\n\u2022Strings, integers, and floats.\n\u2022Arithmetic, concatenation.\n\u2022Common err or messages.\n\u2022Comments and docstrings.\nAt this point, you should be able to write pr ograms that ask for input, perform simple calculations, and output", "\u2022Arithmetic, concatenation.\n\u2022Common err or messages.\n\u2022Comments and docstrings.\nAt this point, you should be able to write pr ograms that ask for input, perform simple calculations, and output\nthe r esults. The pr ogramming pr actice belo w ties together most topics pr esented in the chapter .\nFunction Description\nprint(values) Outputs one or mor e values, each separ ated b y a space, to the user .\ninput(prompt)If pr esent, promptis output to the user . The function then r eads a line of input fr om the\nuser.\nlen(string) Returns the length (the number of char acters) of a string.\ntype(value)Returns the type (or class) of a value. Ex: type(123)is<class'int'>.\nOper ator Description\n=\n(Assignment)Assigns (or updates) the value of a variable. In Python, variables begin to e xist when", "Oper ator Description\n=\n(Assignment)Assigns (or updates) the value of a variable. In Python, variables begin to e xist when\nassigned for the first time.\nTable 1.6Chapter 1 r efer ence.34 1 \u2022 Statements\nAccess for fr ee at openstax.or gFunction Description\n+\n(Concatenation)Appends the contents of two strings, r esulting in a ne w string.\n+\n(Addition)Adds the values of two numbers.\n-\n(Subtr action)Subtr acts the value of one number fr om another .\n*\n(Multiplication)Multiplies the values of two numbers.\n/\n(Division)Divides the value of one number b y another .\n**\n(Exponentiation)Raises a number to a po wer. Ex: 3**2is thr ee squar ed.\nSyntax Description\n#\n(Comment)All te xt is ignor ed fr om the # symbol to the end of the line.\n'or\"", "**\n(Exponentiation)Raises a number to a po wer. Ex: 3**2is thr ee squar ed.\nSyntax Description\n#\n(Comment)All te xt is ignor ed fr om the # symbol to the end of the line.\n'or\"\n(String)Strings may be written using either kind of quote. Ex: 'A'and \"A\"represent the same\nstring. By convention, this book uses double quotes ( \") for most strings.\n\"\"\"\n(Docstring)Used for documentation, often in multi-line strings, to summarize a pr ogram's purpose\nor usage.\nTable 1.6Chapter 1 r efer ence.\nTRY IT\nFun facts\nWrite a pr ogram that assigns a variable named numberto any integer of your choice. Ex: number = 74.\nThen, use this variable to calculate and output the follo wing r esults:\n74squared is5476\n74cubedis405224\nOne tenth of 74is7.41.9 \u2022 Chapter summary 3574plus123is197\n74minus456is-382"], "uris": null, "data": null, "metadatas": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "included": ["documents", "metadatas"]}